[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Group member",
    "section": "",
    "text": "Our group is dedicated to exploring the themes of climate change and urban resilience, with a particular emphasis on Hong Kong. This historically rich and prosperous harbor city, renowned as a global financial hub, is situated in Southern China. Our focus centers on understanding and addressing the unique environmental and urban challenges faced by this vibrant metropolis.\nGroup member:\n\nHang Zhao, Master of Environmental Studies, University of Pennsylvania\nGeorge Chen, Master of Environmental Studies, University of Pennsylvania\nLing Chen, Master of City Planning, University of Pennsylvania\n\nThis site is our final project site showing several exploratory analysis, raster data processing, big data analysis, and clustering, which is part of the final project for MUSA 550, during fall 2023."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis comprehensive section encompasses the entirety of our project, which is divided into five distinct parts. The initial four segments delve into an in-depth exploratory and thematic analysis, focusing on various aspects of Hong Kong. These include its geographical characteristics, trends in precipitation and temperature, as well as an examination of building and population densities. Additionally, the analysis extends to the study of street density and the distribution of open spaces within the region.\nThe culminating segment of our project is centered on our principal investigation: the urban heat island effect. This involves the acquisition of Landsat 8 satellite imagery to observe and analyze temperature variations and NDVI (Normalized Difference Vegetation Index) changes over recent years. This crucial segment of our study culminates in a detailed cluster analysis. This analysis is instrumental in identifying which districts in Hong Kong exhibit similarities and demonstrate greater resilience to the challenges posed by urban heat and extreme weather conditions in the future."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550 Final Project: An Evaluation on Hong Kong Urban Resiliency to Urban Heat",
    "section": "",
    "text": "Group final project for the University of Pennsylvania School of Design course, MUSA 550 Geospatial Data Science in Python.\nOur project, centered on enhancing urban resilience in Hong Kong, addresses the critical issues of climate change and the urban heat island effect through the innovative application of Python data science and geography. By leveraging a rich array of geospatial data, including raster images and extensive datasets from the Hong Kong Government and ESRI, we aim to create insightful visualizations that illuminate the complexities of these environmental challenges. This project stands at the forefront of technology and sustainability, employing advanced techniques like cluster analysis to dissect and understand the spatial patterns of heat distribution and environmental impacts within the urban fabric of Hong Kong.\n\n\n\n\n\n\nImportant\n\n\n\nThis project is currently in the refinement phase, with ongoing efforts to enhance and update its content on this website. Looking ahead, we plan to implement significant improvements, including the integration of a machine learning predictive model. These forthcoming advancements are aimed at further enriching the project’s depth and effectiveness."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550 Final Project: An Evaluation on Hong Kong Urban Resiliency to Urban Heat",
    "section": "",
    "text": "Group final project for the University of Pennsylvania School of Design course, MUSA 550 Geospatial Data Science in Python.\nOur project, centered on enhancing urban resilience in Hong Kong, addresses the critical issues of climate change and the urban heat island effect through the innovative application of Python data science and geography. By leveraging a rich array of geospatial data, including raster images and extensive datasets from the Hong Kong Government and ESRI, we aim to create insightful visualizations that illuminate the complexities of these environmental challenges. This project stands at the forefront of technology and sustainability, employing advanced techniques like cluster analysis to dissect and understand the spatial patterns of heat distribution and environmental impacts within the urban fabric of Hong Kong.\n\n\n\n\n\n\nImportant\n\n\n\nThis project is currently in the refinement phase, with ongoing efforts to enhance and update its content on this website. Looking ahead, we plan to implement significant improvements, including the integration of a machine learning predictive model. These forthcoming advancements are aimed at further enriching the project’s depth and effectiveness."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project: An Evaluation on Hong Kong Urban Resiliency to Urban Heat",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on our course’s GitHub page: Final Project Github Page."
  },
  {
    "objectID": "analysis/3-Pop-Road-Zoning.html",
    "href": "analysis/3-Pop-Road-Zoning.html",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "",
    "text": "Team: Hang Zhao, George Chen, Ling Chen"
  },
  {
    "objectID": "analysis/3-Pop-Road-Zoning.html#final-project",
    "href": "analysis/3-Pop-Road-Zoning.html#final-project",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "",
    "text": "Team: Hang Zhao, George Chen, Ling Chen"
  },
  {
    "objectID": "analysis/3-Pop-Road-Zoning.html#available-dataset-sources",
    "href": "analysis/3-Pop-Road-Zoning.html#available-dataset-sources",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "Available Dataset & Sources",
    "text": "Available Dataset & Sources\n\nHK data gov Hong Kong Government Open Data\npolyU sources Hong Kong PolyU open data sources\nHK Observatory Hong Kong Observatory\nHK CSDI Portal Hong Kong CSDI Spatial Data Portal\nESRI China ESRI China (Hong Kong) Geospatial Data\n\n\n\nCode\n# The imports\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport requests\nimport geopandas as gpd\nimport hvplot.pandas\nimport rasterio as rio\nimport rioxarray\nimport xarray as xr\nimport hvplot.xarray\nimport panel as pn\nimport osmnx as ox\nfrom shapely.geometry import Point\nimport seaborn as sns\nimport contextily as ctx\n\n# Make sure plots show up in JupyterLab!\n%matplotlib inline"
  },
  {
    "objectID": "analysis/3-Pop-Road-Zoning.html#data-exploratory",
    "href": "analysis/3-Pop-Road-Zoning.html#data-exploratory",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "Data Exploratory",
    "text": "Data Exploratory\n\n1. Hong Kong Population\nAreas with higher populations tend to experience a more pronounced UHI effect due to increased heat generation and retention associated with human activities and urban infrastructure. As such, we collect 2011/2016/2021 demographic data from Hong Kong Common Spatial Data Infrastructure Portal to see the distribution and trend of population. Specifically, we look into total population and average age in the exploratory analysis.\n\n\n\n\n\n\n\n\n\nOBJECTID\n分區\nDistrict\n人口密度\nPopulation_Density\nShape__Area\nShape__Length\n總人口\nTotal_population\ngeometry\n\n\n\n\n0\n1\n黃大仙\nWong Tai Sin\n43730\n43730\n1.092784e+07\n17995.640782\n406802\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n九龍城\nKowloon City\n40994\n40994\n1.184286e+07\n31834.409404\n410634\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n觀塘\nKwun Tong\n59704\n59704\n1.322124e+07\n25496.700164\n673166\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n西貢\nSai Kung\n3771\n3771\n1.602944e+08\n365545.476363\n489037\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n北區\nNorth\n2269\n2269\n1.619184e+08\n192815.532996\n309631\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nDistrict\nPopulation_Density\nShape__Area\nShape__Length\nTotal_population\ngeometry\n\n\n\n\n0\n1\nWong Tai Sin\n43730\n1.092784e+07\n17995.640782\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\nKowloon City\n40994\n1.184286e+07\n31834.409404\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\nKwun Tong\n59704\n1.322124e+07\n25496.700164\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\nSai Kung\n3771\n1.602944e+08\n365545.476363\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\nNorth\n2269\n1.619184e+08\n192815.532996\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\nAs seen in the map, the population is primarily concentrated in the central urban districts, which include Kwun Tong District, Yau Tsim Mong District, Kowloon City District, Wong Tai Sin District, Sham Shui Po District, and Eastern District across Victoria Harbour. The population density diminishes as the distance from the center increases.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n&lt;Response [200]&gt;\n\n\n\n\n&lt;Response [200]&gt;\n\n\nWe have developed an interactive dashboard that provides demographic data for the years 2011, 2016, and 2021, organized by District Council District. This dashboard offers a detailed breakdown of densely populated areas, with a particular focus on the central urban district. Interestingly, we can also identify numerous smaller districts with significant population clusters in the outskirts of Hong Kong. For average age distribution especially in recent years, they are more likely to cluster in the core areas, followed by the New Territories in the north.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\ngeometry\ndc_eng_x\ndcca_eng\nca_eng_x\ntotal_pop_2016\nmedian_age_2016\ntotal_pop_2021\nmedian_age_2021\ntotal_pop_2011\nmedian_age_2011\nindex_right\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\n\n\n\n\n193\nMULTIPOLYGON (((114.12785 22.35163, 114.12745 ...\nKwai Tsing\nKwai Tsing - Lai King\nLai King\n13985\n49.1\n13658\n53.4\n14768\n46.3\n12\n13\n4\n深水埗區\n深水埗区\nSHAM SHUI PO\n1.100815e+07\n28395.306312\n\n\n\n\n\n\n\n\n\n2. Road Network\nUrban Heat Island is related with transportation infrastructure as well, especially in densely populated cities like Hong Kong. As such, we further explore the this factor in the perspective of road network. Specifically, we’ll further investigate into road length and road density within 18 districts in Hong Kong.\n\nRetrieve Road Network from Open Street Map\nAs we can see from the exploratory map, the form and density of Hong Kong’s road network are highly influenced by its hilly and mountainous terrain, resulting in a dispersed, complex, and high-density configuration. Hong Kong has a relatively well-developed road transportation network, but due to the presence of extensive urban development and roads, urban areas are prone to absorbing and storing heat, leading to relatively higher temperatures within the city.\n\n\n\n\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCalculate Road Length & Density in 18 Districts\n\n\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\nlength\n\n\n\n\n0\nCENTRAL & WESTERN\n184421.695\n\n\n1\nEASTERN\n196191.617\n\n\n2\nISLANDS\n347799.377\n\n\n3\nKOWLOON CITY\n200720.061\n\n\n4\nKWAI TSING\n325607.738\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n\n\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\625515033.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  hk_limit['area'] = hk_limit['geometry'].area / 1e6\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n8.156332e-10\n1.418236e+14\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n9.870107e-10\n2.338801e+14\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n1.196284e-08\n3.180799e+13\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n1.207042e-08\n3.608532e+13\n\n\n\n\n\n\n\nIt appears that the highest road network density is concentrated in the central and most urbanized districts of Hong Kong, such as Yau Tsim Mong, Kowloon City, and Sham Shui Po districts. Notably, Yuen Long District in the north stands as an exception, displaying relatively robust road network density. Conversely, as one moves farther away from the core districts, particularly towards the coastline, there is a gradual decline in road network density. The areas characterized by the lowest densities and minimal road infrastructure tend to be situated in remote or rural locations. Additionally, these areas may encompass the outlying islands or protected regions within the New Territories.\n\n\n\n\n\n\n\n\n3. Land Use/ Zoning\nLand use/ zoning also has a significant impact on the Urban Heat Island as well, as different types of land use can either mitigate or exacerbate the heat. In the context of Hong Kong, it boosts a wide range of open space like the green belt, agriculture, recreation areas, country parks, etc, which can mitigate the heat significance. Conversely, areas with intensive human activities and built environments tend to experience higher temperatures.\n\nFilter Open Space Part within Land Use/Zoning\nWithin the zoning map, we have identified and selected land types with the potential to mitigate the influence of the Urban Heat Island. These include areas designated as open space, green belts, conservation areas, recreational sites, agricultural land, pedestrian streets, and coastal protection areas. These selected zones will be plotted to highlight their distribution and potential cooling effect on the urban environment.\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\516839381.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  zoning_select['center']=zoning_select.geometry.centroid\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID_left\nID\nCNAME\nCNAME_S\nShape__Area_left\nShape__Length_left\ngeometry\nroad_length\narea\nroad_density\nindex_right\nOBJECTID_right\nPLAN_NO\nZONE_LABEL\nDESC_ENG\nDESC_CHT\nSPUSE_ENG\nSPUSE_CHT\nSHAPE_Leng\nShape__Area_right\nShape__Length_right\ncenter\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n899\n900\nS/H1/22\nOU\nOther Specified Uses\n其他指定用途\nPUBLIC MORTUARY\n公眾殮房\n233.257105\n2865.110779\n233.257108\nPOINT (114.11725 22.27801)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n12.511457\n\n\n1\nEASTERN\n15.717715\n\n\n2\nISLANDS\n93.395277\n\n\n3\nKOWLOON CITY\n4.043059\n\n\n4\nKWAI TSING\n16.084105\n\n\n5\nKWUN TONG\n8.248983\n\n\n6\nNORTH\n72.372960\n\n\n7\nSAI KUNG\n38.122037\n\n\n8\nSHA TIN\n25.508923\n\n\n9\nSHAM SHUI PO\n6.539740\n\n\n10\nSOUTHERN\n30.205835\n\n\n11\nTAI PO\n39.991753\n\n\n12\nTSUEN WAN\n25.119254\n\n\n13\nTUEN MUN\n23.514369\n\n\n14\nWAN CHAI\n11.311346\n\n\n15\nWONG TAI SIN\n3.320487\n\n\n16\nYAU TSIM MONG\n2.894091\n\n\n17\nYUEN LONG\n76.750176\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID\nID\nCNAME\nCNAME_S\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n12.511457\n\n\n1\nEASTERN\n627887\n598232\n632158\n43.977500\n44.047500\n48.742500\n8\n15\n東區\n东区\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n196191.617\n1.631095e-09\n1.202822e+14\n15.717715\n\n\n2\nISLANDS\n106179\n105513\n87160\n39.280000\n42.060000\n42.640000\n12\n2\n離島區\n离岛区\n2.092858e+08\n352295.332949\nMULTIPOLYGON (((113.92250 22.15339, 113.92241 ...\n347799.377\n1.563092e-08\n2.225073e+13\n93.395277\n\n\n3\nKOWLOON CITY\n619041\n599881\n609338\n43.321622\n44.024324\n46.962162\n2\n6\n九龍城區\n九龙城区\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n4.043059\n\n\n4\nKWAI TSING\n619133\n576820\n638052\n42.177778\n44.091667\n48.169444\n15\n3\n葵青區\n葵青区\n2.741789e+07\n56502.167657\nMULTIPOLYGON (((114.09501 22.32524, 114.09501 ...\n325607.738\n2.046340e-09\n1.591171e+14\n16.084105"
  },
  {
    "objectID": "analysis/2-Final-Project-Explore.html",
    "href": "analysis/2-Final-Project-Explore.html",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "",
    "text": "Team: Hang Zhao, George Chen, Ling Chen"
  },
  {
    "objectID": "analysis/2-Final-Project-Explore.html#final-project",
    "href": "analysis/2-Final-Project-Explore.html#final-project",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "",
    "text": "Team: Hang Zhao, George Chen, Ling Chen"
  },
  {
    "objectID": "analysis/2-Final-Project-Explore.html#available-dataset-sources",
    "href": "analysis/2-Final-Project-Explore.html#available-dataset-sources",
    "title": "Data Exploratory: Part I",
    "section": "Available Dataset & Sources",
    "text": "Available Dataset & Sources\n\nHK data gov Hong Kong Government Open Data\npolyU sources Hong Kong PolyU open data sources\nHK Observatory Hong Kong Observatory\nHK CSDI Portal Hong Kong CSDI Spatial Data Portal\nESRI China ESRI China (Hong Kong) Geospatial Data\n\n\n\nCode\n# The imports\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport requests\nimport geopandas as gpd\nimport hvplot.pandas\nimport rasterio as rio\nimport rioxarray\nimport xarray as xr\nimport hvplot.xarray\nimport panel as pn\nimport osmnx as ox\nfrom shapely.geometry import Point\n\n# Make sure plots show up in JupyterLab!\n%matplotlib inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npd.options.display.max_columns = 999"
  },
  {
    "objectID": "analysis/2-Final-Project-Explore.html#data-exploratory",
    "href": "analysis/2-Final-Project-Explore.html#data-exploratory",
    "title": "Data Exploratory: Part I",
    "section": "Data Exploratory",
    "text": "Data Exploratory\n\n1. Hong Kong Population\nInitially, we examined the population density across all 18 districts of Hong Kong. This analysis was based on the 2021 Census data obtained from the ESRI China data portal. The population density was calculated by dividing the total population of each district by its respective area.\n\n\nCode\n# url for population data\npop_url = (\n    \"https://services3.arcgis.com/6j1KwZfY2fZrfNMR/arcgis/rest/services/Hong_Kong_Population_Density_2021/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\"\n)\npop_raw = gpd.read_file(pop_url)\n\n\n\n\nCode\ndistrict_url = (\n    'https://services3.arcgis.com/6j1KwZfY2fZrfNMR/arcgis/rest/services/Hong_Kong_18_Districts/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'\n)\nhk_limit = gpd.read_file(district_url)\n\n\n\n\nCode\npop_raw = pop_raw.drop(pop_raw.columns[[1, 3, 7]], axis=1)\n\n\n\n\nCode\npop_raw.hvplot(\n    c=\"Population_Density\",\n    frame_width=600,\n    frame_height=600, \n    alpha=0.7,\n    geo=True,\n    cmap=\"Oranges\",\n    hover_cols=[\"District\"],\n    tiles=\"CartoLight\"\n)\n\n\n\n\n\n\n  \n\n\n\n\nIt can be seen that the middle five districts: Kwun Tong, Wong Tai Sin, Kowloon City, Yau Tsim Mong, Sham Shui Po are having the highest population density, where there are various amenities such as museums, parks, extensive infrastructure, restaurants and shopping mall, as well as schools and hospitals. These regions are also called old city in Hong Kong, the opposite to the Hong Kong Island (Central, Wan Chai, and Eastern) where is well known for the city’s financial hub.\n\n\n2. Hong Kong Rainfall\n\n\nCode\nrain_url = (\n    \"https://data.weather.gov.hk/weatherAPI/cis/csvfile/HKO/ALL/daily_HKO_RF_ALL.csv\"\n)\nrain_raw = pd.read_csv(rain_url, skiprows=[0,1])\n\n\n\n\nCode\nrain_raw = rain_raw.drop([i for i in range(0,36100)],axis=0).dropna()\n\n\n\n\nCode\nrain_raw['數值/Value']=pd.to_numeric(rain_raw['數值/Value'], errors='coerce')\n\n\n\n\nCode\nrain = rain_raw.groupby(by=[\"年/Year\"], dropna=True, as_index=False)[\"數值/Value\"].sum()\n\n\n\n\nCode\nrain.rename(\n    columns = {'年/Year':'Year', '數值/Value':'max_rainfall'}, inplace = True)\n\n\n\n\nCode\nrain_bar = rain.hvplot.bar(x='Year', y='max_rainfall', rot=90, alpha=0.7, color=\"aquamarine\")\nrain_line = rain.hvplot(x='Year', y='max_rainfall')\nrain_bar*rain_line\n\n\n\n\n\n\n  \n\n\n\n\n\n\n3. Temperature\n\n\nCode\ntemp_url = (\n    \"https://data.weather.gov.hk/weatherAPI/opendata/opendata.php?dataType=CLMMAXT&rformat=csv&station=HKO\"\n)\ntemp_raw = pd.read_csv(temp_url, skiprows=[0,1])\n\n\n\n\nCode\ntemp_new = temp_raw.drop([i for i in range(0,36160)],axis=0).dropna()\n\n\n\n\nCode\ntemp_new.rename(\n    columns = {'年/Year':'Year', '數值/Value':'temp'}, inplace = True)\n\n\n\n\nCode\ntemp_new['temp']=pd.to_numeric(temp_new['temp'])\n\n\n\n\nCode\ntemp_data = temp_new.groupby('Year', dropna=True, as_index=False).agg({\n    'temp': ['max', 'min', 'mean']})\n\n\n\n\nCode\ntemp_data.columns = [col[0] if col[1] == '' else '_'.join(col) for col in temp_data.columns]\n\n\n\n\nCode\n# Create a Select widget with options for 'temp_max', 'temp_min', 'temp_mean'\nselect_widget = pn.widgets.Select(name='Temperature Metric', options=['temp_max', 'temp_min', 'temp_mean'])\n\n# Define a function that creates an hvplot based on the selected metric\ndef create_temperature_plot(metric):\n    return temp_data.hvplot.line(x='Year', y=metric, height=400, width=700, title=f'Yearly Temperature ({metric})', rot=90)\n\n# Bind the plot function to the widget\ndynamic_plot = pn.bind(create_temperature_plot, metric=select_widget)\n\n# Create a Panel layout with the widget and the bound plot\nlayout = pn.Column(select_widget, dynamic_plot)\n\n# If running in a Jupyter notebook, display the Panel layout using:\nlayout"
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#temperature-and-ndvi-are-two-major-factors-when-considering-urban-heat-index",
    "href": "analysis/4-HK-Temp-NDVI.html#temperature-and-ndvi-are-two-major-factors-when-considering-urban-heat-index",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Temperature and NDVI are two major factors when considering Urban Heat Index",
    "text": "Temperature and NDVI are two major factors when considering Urban Heat Index"
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#selection-of-landsat-7-data-for-consistency-with-census-intervals",
    "href": "analysis/4-HK-Temp-NDVI.html#selection-of-landsat-7-data-for-consistency-with-census-intervals",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Selection of Landsat 7 Data for Consistency with Census Intervals",
    "text": "Selection of Landsat 7 Data for Consistency with Census Intervals\n\nThe Urban Heat Index (UHI) analysis in Hong Kong heavily relies on two primary factors: temperature and the Normalized Difference Vegetation Index (NDVI). To align the satellite data with census intervals, we’ve opted for data from Landsat 7 ETM+. The choice of Landsat 7, despite the availability of Landsat 8 and 9, is dictated by the need for consistency with the census data from the Hong Kong government and ESRI Hong Kong, which are available every five years. The most recent census data was from 2021, necessitating the use of data from 2011 and 2016 as well. Given that Landsat 8 started operating in 2013, it wouldn’t cover the entire period corresponding to our census data, leading to the decision to utilize Landsat 7’s data for a comprehensive analysis."
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#methodology-for-accurate-data-retrieval-and-processing",
    "href": "analysis/4-HK-Temp-NDVI.html#methodology-for-accurate-data-retrieval-and-processing",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Methodology for Accurate Data Retrieval and Processing",
    "text": "Methodology for Accurate Data Retrieval and Processing\n\nFor ensuring accuracy, our approach involved creating a mosaic composite raster image from Google Earth Engine, filtered for the entire year. This process was repeated for each year from 2011 to 2021 to extract the annual mean of temperature and NDVI for each pixel. The most challenging aspect of this section was the calibration of the data retrieved from Google Earth Engine. We encountered numerous difficulties in calibrating the band data. For instance, there were times when the NDVI worked correct (in the range) on Google Earth Engine but failed in Python. Similarly, issues were faced with the land surface temperature data. After countless attempts and explorations, we discovered a calculation method from an academic paper that provided a more refined approach. This method allowed for the conversion of digital numbers, surface reflectance, top of the atmosphere reflectance, top brightness temperature, and land surface temperature in a more accurate way.\n\n\n(GEE link:https://code.earthengine.google.com/a1c8085a46f0c89f1d82f0cfcfabacd8)\n\nReference: Ermida, S.L., Soares, P., Mantas, V., Göttsche, F.-M., Trigo, I.F., 2020.\n\n\nGoogle Earth Engine open-source code for Land Surface Temperature estimation from the Landsat series.\n\n\nRemote Sensing, 12 (9), 1471; https://doi.org/10.3390/rs12091471\n\n\n\nLoad the Lansat 7 2011 Mosaic Image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2503, y: 1783)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.5 114.5 114.5 114.5\n  * y            (y) float64 22.57 22.57 22.57 22.57 ... 22.09 22.09 22.09 22.09\n    spatial_ref  int64 ...\nData variables:\n    band_data    (band, y, x) float32 ...xarray.DatasetDimensions:band: 16x: 2503y: 1783Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.5 114.5array([113.784791, 113.785061, 113.78533 , ..., 114.458528, 114.458797,\n       114.459067])y(y)float6422.57 22.57 22.57 ... 22.09 22.09array([22.57354 , 22.573271, 22.573001, ..., 22.09384 , 22.09357 , 22.093301])spatial_ref()int64...crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647[1 values with dtype=int64]Data variables: (1)band_data(band, y, x)float32...AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')[71405584 values with dtype=float32]Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.78479105264977,   113.785060547235, 113.78533004182023,\n              113.78559953640547, 113.78586903099071, 113.78613852557595,\n              113.78640802016118, 113.78667751474642, 113.78694700933166,\n               113.7872165039169,\n              ...\n              114.45664105364276,   114.456910548228, 114.45718004281322,\n              114.45744953739846,  114.4577190319837, 114.45798852656894,\n              114.45825802115417,  114.4585275157394, 114.45879701032464,\n              114.45906650490988],\n             dtype='float64', name='x', length=2503))yPandasIndexPandasIndex(Float64Index([22.573540195818428,  22.57327070123319, 22.573001206647955,\n               22.57273171206272, 22.572462217477483, 22.572192722892247,\n              22.571923228307014, 22.571653733721778, 22.571384239136542,\n              22.571114744551306,\n              ...\n              22.095726296195256,  22.09545680161002, 22.095187307024784,\n              22.094917812439547,  22.09464831785431, 22.094378823269075,\n               22.09410932868384, 22.093839834098603, 22.093570339513366,\n               22.09330084492813],\n             dtype='float64', name='y', length=1783))Attributes: (0)\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nRead the Hong Kong District Data from ArcGIS geojson\n\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n\n\nWe decided to use EPSG: 4326 since the CRS of Landsat 7 Data’s is EPSG= 4326\n\n\n(113.835066606914, 22.153344109236, 114.441993257571, 22.5619493489016)\n\n\n\n\nTrim our precious Raster Data to the Hong Kong Boundary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2252, y: 1516)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.4 114.4 114.4 114.4\n  * y            (y) float64 22.56 22.56 22.56 22.56 ... 22.15 22.15 22.15 22.15\n    spatial_ref  int64 0\nData variables:\n    band_data    (band, y, x) float32 1.004e+04 9.852e+03 ... 0.9903 0.9901xarray.DatasetDimensions:band: 16x: 2252y: 1516Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.4 114.4array([113.835187, 113.835456, 113.835726, ..., 114.44128 , 114.441549,\n       114.441819])y(y)float6422.56 22.56 22.56 ... 22.15 22.15array([22.561682, 22.561413, 22.561143, ..., 22.153937, 22.153668, 22.153398])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(band, y, x)float321.004e+04 9.852e+03 ... 0.9901AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')array([[[1.0039000e+04, 9.8520000e+03, 9.8520000e+03, ...,\n         9.3790000e+03, 9.5540000e+03, 9.2050000e+03],\n        [9.9450000e+03, 1.0039000e+04, 1.0039000e+04, ...,\n         9.2910000e+03, 9.2050000e+03, 9.3790000e+03],\n        [9.8520000e+03, 9.9460000e+03, 9.9460000e+03, ...,\n         9.4680000e+03, 9.2910000e+03, 9.2050000e+03],\n        ...,\n        [1.0704000e+04, 1.0804000e+04, 1.0804000e+04, ...,\n         9.5450000e+03, 9.7170000e+03, 9.8020000e+03],\n        [1.0804000e+04, 1.0906000e+04, 1.0604000e+04, ...,\n         9.6320000e+03, 9.8020000e+03, 9.7170000e+03],\n        [1.0804000e+04, 1.0604000e+04, 1.0906000e+04, ...,\n         9.5450000e+03, 9.5450000e+03, 9.6320000e+03]],\n\n       [[1.0514000e+04, 1.0614000e+04, 1.0614000e+04, ...,\n         9.1010000e+03, 9.1010000e+03, 9.0070000e+03],\n        [1.0614000e+04, 1.0514000e+04, 1.0514000e+04, ...,\n         9.1940000e+03, 9.1010000e+03, 9.1940000e+03],\n        [1.0414000e+04, 1.0514000e+04, 1.0614000e+04, ...,\n         9.2880000e+03, 9.1010000e+03, 9.1940000e+03],\n...\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9137042e+02, 2.9137042e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02]],\n\n       [[9.8962820e-01, 9.8978066e-01, 9.8978066e-01, ...,\n         9.8911905e-01, 9.8882079e-01, 9.8896593e-01],\n        [9.8954946e-01, 9.9022216e-01, 9.9022216e-01, ...,\n         9.8911905e-01, 9.8875976e-01, 9.8911905e-01],\n        [9.9013770e-01, 9.8986351e-01, 9.8978066e-01, ...,\n         9.8896772e-01, 9.8926890e-01, 9.8865867e-01],\n        ...,\n        [9.9023283e-01, 9.8983717e-01, 9.9028999e-01, ...,\n         9.9008703e-01, 9.9028999e-01, 9.9008703e-01],\n        [9.9023283e-01, 9.8974222e-01, 9.9004382e-01, ...,\n         9.9028999e-01, 9.9008703e-01, 9.9028999e-01],\n        [9.8992366e-01, 9.8974222e-01, 9.9023283e-01, ...,\n         9.9028999e-01, 9.9028999e-01, 9.9008703e-01]]], dtype=float32)Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981, 113.83653401301505,\n              113.83680350760028, 113.83707300218552, 113.83734249677076,\n                113.837611991356,\n              ...\n              114.43939340018765,  114.4396628947729, 114.43993238935813,\n              114.44020188394337,  114.4404713785286, 114.44074087311384,\n              114.44101036769908, 114.44127986228432, 114.44154935686954,\n              114.44181885145478],\n             dtype='float64', name='x', length=2252))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105,  22.56033496114187,\n              22.560065466556633,   22.5597959719714, 22.559526477386164,\n              22.559256982800928,\n              ...\n               22.15582358870285, 22.155554094117615,  22.15528459953238,\n              22.155015104947143, 22.154745610361907,  22.15447611577667,\n              22.154206621191435,   22.1539371266062, 22.153667632020962,\n              22.153398137435726],\n             dtype='float64', name='y', length=1516))Attributes: (0)\n\n\n\n\nRaster image combined with City limits\n\n\n\n\n\n\n  \n\n\n\n\n\n\nCalculate the NDVI using Near Infrared Band and Red Band.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      ()\nCoordinates:\n    spatial_ref  int64 0\nData variables:\n    band_data    float32 0.07433xarray.DatasetDimensions:Coordinates: (1)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data()float320.07433array(0.07432684, dtype=float32)Indexes: (0)Attributes: (0)\n\n\n\n\nPlot the 2011 mean NDVI with city limits\n\n\n\n\n\n\n  \n\n\n\n\n\n\nThe Band 15 is the calibrated Land Surface Temperature Band in Kelvin, so we have to subtract 273.15 from the original band data to convert it to Celsius\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (x: 5, y: 5)\nCoordinates:\n    band         int64 15\n  * x            (x) float64 113.8 113.8 113.8 113.8 113.8\n  * y            (y) float64 22.56 22.56 22.56 22.56 22.56\n    spatial_ref  int64 0\nData variables:\n    band_data    (y, x) float32 19.86 19.86 19.86 20.4 ... 17.04 17.04 17.04xarray.DatasetDimensions:x: 5y: 5Coordinates: (4)band()int6415array(15)x(x)float64113.8 113.8 113.8 113.8 113.8array([113.835187, 113.835456, 113.835726, 113.835995, 113.836265])y(y)float6422.56 22.56 22.56 22.56 22.56array([22.561682, 22.561413, 22.561143, 22.560874, 22.560604])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(y, x)float3219.86 19.86 19.86 ... 17.04 17.04array([[19.857178, 19.857178, 19.857178, 20.401917, 19.857178],\n       [19.857544, 19.857544, 19.857544, 20.402283, 20.402283],\n       [19.85791 , 19.85791 , 20.40268 , 20.40268 , 19.85791 ],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246]],\n      dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981],\n             dtype='float64', name='x'))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105],\n             dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      ()\nCoordinates:\n    band         int64 15\n    spatial_ref  int64 0\nData variables:\n    band_data    float32 20.17xarray.DatasetDimensions:Coordinates: (2)band()int6415array(15)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data()float3220.17array(20.173859, dtype=float32)Indexes: (0)Attributes: (0)\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nUsing Zonal Statistics to calculate the mean temperature and NDVI for each Hong Kong District\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nmax_temp_2011\nmean_ndvi_2011\nmax_temp_2016\nmean_ndvi_2016\nmax_temp_2021\nmean_ndvi_2021\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n20.704102\n0.211102\n24.699992\n0.234139\n26.466919\n0.281273\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n23.277648\n0.090806\n26.748404\n0.097568\n27.015625\n0.082009\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n22.402509\n0.121019\n26.426119\n0.136822\n25.915802\n0.151406\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n21.255087\n0.262977\n24.956479\n0.282872\n28.377014\n0.331882\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n19.671759\n0.251814\n22.677352\n0.271825\n24.527130\n0.217186\n\n\n5\n6\n13\n中西區\n中西区\nCENTRAL & WESTERN\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n18.948752\n0.194695\n23.794897\n0.199246\n23.404785\n0.277967\n\n\n6\n7\n14\n灣仔區\n湾仔区\nWAN CHAI\n1.161490e+07\n19548.075298\nMULTIPOLYGON (((114.20012 22.27387, 114.20047 ...\n19.608638\n0.191913\n24.292477\n0.201838\n23.967255\n0.248621\n\n\n7\n8\n15\n東區\n东区\nEASTERN\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n19.821950\n0.213661\n23.827175\n0.236692\n23.686340\n0.222808\n\n\n8\n9\n17\n屯門區\n屯门区\nTUEN MUN\n9.921091e+07\n99074.932441\nMULTIPOLYGON (((113.93745 22.42638, 113.93765 ...\n20.773037\n0.188711\n25.061902\n0.221932\n25.639313\n0.222856\n\n\n9\n10\n18\n元朗區\n元朗区\nYUEN LONG\n1.648768e+08\n91328.856191\nMULTIPOLYGON (((113.93832 22.42696, 113.93843 ...\n20.540728\n0.196683\n23.764657\n0.213754\n26.466919\n0.192931\n\n\n\n\n\n\n\n\n\nMean 2011 annual temperature for each district\n\n\n\n\n\n\n  \n\n\n\n\n\n\nMean annual NDVI for each district"
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#cluster-analysis",
    "href": "analysis/4-HK-Temp-NDVI.html#cluster-analysis",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Cluster Analysis",
    "text": "Cluster Analysis\nWe will perform K-means Cluster Analysis for our final analytical output.\n\n\nIndex(['NAME_EN', 'NAME_TC', 'total_pop_2016', 'total_pop_2021',\n       'total_pop_2011', 'median_age_2011', 'median_age_2016',\n       'median_age_2021', 'OBJECTID', 'ID', 'CNAME', 'CNAME_S', 'ENAME',\n       'Shape__Area', 'Shape__Length', 'road_length', 'area', 'road_density',\n       'open_space_area', 'mean_temp_2011', 'mean_temp_2016', 'mean_temp_2021',\n       'mean_ndvi_2011', 'mean_ndvi_2016', 'mean_ndvi_2021',\n       'building_density', 'geometry'],\n      dtype='object')\n\n\nWe first import all libraries we need, and then choose the key variables to determine the clustering pattern in our merged dataset, which are: Total population in 2011, 2016, 2021, median age of the population (in three years) for each district in Hong Kong, road density, open space area, mean temperature in three years, mean ndvi (normalized difference vegetation index) in three years, and building density by district.\nInitially, we selected a cluster size of four for our preliminary testing of the clustering model. Random_state set to 42 so that we can make the randomness deterministic.\nScree plot is one way to determine how many cluster we should input for our kmeans model. From the shape of the curve, we probably will select 3 or 4 for our final number of cluster.\n\n\n\n\n\nThis ‘Kneed’ package can help us determine the ‘knee’ point quantitatively. It gives out the number of cluster of 4, which aligns with our initial testing and decision for Scree plot.\n\n\n4\n\n\nAfter performing the kmeans analysis, we gives each district a ‘label’ so that we can visualize the cluster onto map.\n\n\n\n\n\n\n\n\n\nlabel\nsize\n\n\n\n\n0\n0\n1\n\n\n1\n1\n5\n\n\n2\n2\n7\n\n\n3\n3\n5\n\n\n\n\n\n\n\nWe finally plot our result as a map. It can be seen that four clusters are shown quite evenly across Hong Kong, except Cluster 0 (in Dark Red) which demonstrates the Hong Kong Island District with airports, few buildings, low population density, mainly mountains and high volume of vegetations).\nIt demonstrates that the pale blue regions (Cluster 2) are remote suburb areas with relatively low population and building density, and are having large areas of parks and natural landscapes. The orange regions (Cluster 1) represents the main populated living area where population densities are high and buildings are dense. Dark Blue (Cluster 3) regions are the main business & entertainment and travel areas where there are many buildings and population, while the area is small so density is high.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n\nIf we are to assign names to those clusters, the dark red (cluster 0) will be Emergent Mixed-Use Area, the orange (cluster 1) will be Urban Residential Zone, the pale blue (cluster 2) will be Suburb Oasis, the dark blue (cluster 3) will be Commercial and Entertainment Hub."
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#appendix",
    "href": "analysis/4-HK-Temp-NDVI.html#appendix",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Appendix",
    "text": "Appendix"
  },
  {
    "objectID": "analysis/4-HK-Temp-NDVI.html#httpscode.earthengine.google.com531a9a4d8b3a6c1a3fafab218f7d7159.",
    "href": "analysis/4-HK-Temp-NDVI.html#httpscode.earthengine.google.com531a9a4d8b3a6c1a3fafab218f7d7159.",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "(https://code.earthengine.google.com/531a9a4d8b3a6c1a3fafab218f7d7159).",
    "text": "(https://code.earthengine.google.com/531a9a4d8b3a6c1a3fafab218f7d7159).\n\nNavigating Data Source Challenges in Urban Heat Index Analysis\n\n\nThe process of acquiring and utilizing data for our Urban Heat Index analysis involved a series of steps and challenges, particularly in the context of data calibration and exportation. Our primary data source was a feature collection from the Google Earth Engine (GEE), which provided us with Landsat 7 satellite imagery. We initially started with the Raw Scene version of the Landsat 7 data. This version had no calibration applied to the digital numbers, which meant that the data was in its most unprocessed form.\n\n\nSubsequently, we discovered the “Top of Atmosphere” (TOA) version of the Landsat 7 data, which had been converted by the US Geological Survey (USGS). This TOA version seemed promising and functioned well within the Google Earth Engine environment. However, we encountered a significant issue when exporting the data from GEE to Python. Specifically, the values for Band 3 and Band 4 were altered during this export process. This alteration led to the NDVI values falling outside the expected range of -1 to 1, a puzzling issue that we struggled to resolve.\n\n\nIn an attempt to address this, we implemented cloud masks to remove the impact of cloud cover from our analysis, hoping this would correct the discrepancies in the NDVI values. Unfortunately, this step did not yield the desired results. We speculated that the problem might lie in the process of exporting the data, particularly the step where data is transferred to Google Drive. The data, when downloaded, undergoes a zipping and unzipping process on our laptops. We hypothesized that this process could potentially alter the band values for Band 3, 4, and 6 (the Thermal Band similar to Landsat 8 Band 10 and Band 11), resulting in the discrepancies we observed"
  },
  {
    "objectID": "analysis/3-Building.html",
    "href": "analysis/3-Building.html",
    "title": "Data Exploratory: Building",
    "section": "",
    "text": "Code\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport geopandas as gpd\nimport hvplot.pandas\nimport panel as pn\n\n# Make sure plots show up in JupyterLab!\n%matplotlib inline\nCode\nimport holoviews as hv\nimport geoviews as gv\nCode\nfrom holoviews.operation.datashader import datashade\n\nhv.extension('bokeh')"
  },
  {
    "objectID": "analysis/3-Building.html#building",
    "href": "analysis/3-Building.html#building",
    "title": "Hong Kong Building Visualization",
    "section": "Building",
    "text": "Building\n\n\nCode\n# please try again if run with error for first time\ndistrict_url = (\n    'https://services3.arcgis.com/6j1KwZfY2fZrfNMR/arcgis/rest/services/Hong_Kong_18_Districts/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'\n)\nhk_limit = gpd.read_file(district_url)\nhk_limit.head()\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\nCode\nbuilding_raw = gpd.read_file(\n    \"/Users/hangzhao/Documents/MUSA_550/Final Project/Data/Building.geojson\")\nbuilding_raw.head()\n\n\n\n\n\n\n\n\n\nOBJECTID\nLASTUPDATEDATE\nBUILDINGID\nTYPEOFBUILDINGBLOCK\nBASELEVEL\nROOFLEVEL\nBASELEVELDATASOURCE\nROOFLEVELDATASOURCE\nBUILDINGSTATUS\nCERTAINTY\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n2014-07-01 00:00:00+00:00\n1108522404\nT\n16.9\n21.3\n5\n4\nE\n1\n71.640625\n34.756858\nPOLYGON Z ((113.96350 22.40813 0.00000, 113.96...\n\n\n1\n2\n2014-07-01 00:00:00+00:00\n1108523034\nT\n15.5\n18.0\n5\n5\nE\n1\n74.509766\n40.051622\nPOLYGON Z ((113.97897 22.40319 0.00000, 113.97...\n\n\n2\n3\n2014-07-01 00:00:00+00:00\n1108523019\nT\n7.4\n12.3\n5\n4\nE\n1\n73.322266\n36.024633\nPOLYGON Z ((113.97356 22.40331 0.00000, 113.97...\n\n\n3\n4\n2014-07-01 00:00:00+00:00\n1105710522\nOS\nNaN\nNaN\n4\n4\nE\n1\n75.222656\n34.720149\nPOLYGON Z ((113.98813 22.47048 0.00000, 113.98...\n\n\n4\n5\n2014-07-01 00:00:00+00:00\n1105710546\nOS\nNaN\nNaN\n4\n4\nE\n1\n46.123047\n28.230848\nPOLYGON Z ((114.06630 22.47048 0.00000, 114.06...\n\n\n\n\n\n\n\n\n\nCode\n# Define some a default plot width & height\nplot_width  = 800\nplot_height = int(plot_width*7.0/12)\n\n\n\n\nCode\nbuilding_raw['x'] = building_raw.geometry.centroid.x\nbuilding_raw['y'] = building_raw.geometry.centroid.y\n\n\n/var/folders/8y/y89rxkzj5bv2c24kw9zjzy9c0000gn/T/ipykernel_5537/3610934947.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  building_raw['x'] = building_raw.geometry.centroid.x\n/var/folders/8y/y89rxkzj5bv2c24kw9zjzy9c0000gn/T/ipykernel_5537/3610934947.py:2: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  building_raw['y'] = building_raw.geometry.centroid.y\n\n\n\n\nCode\ndistricts_map = hk_limit.hvplot.polygons(\n    geo=True,\n    crs=4326,\n    line_color=\"white\",\n    fill_alpha=0,\n    frame_width=plot_width,\n    frame_height=plot_height,\n)\n\n\n\n\nCode\npoints = building_raw.hvplot.points(\n    x=\"x\",\n    y=\"y\",\n    datashade=True, # NEW: tell hvplot to use datashader!\n    aggregator=ds.count(), # NEW: how to aggregate\n    cmap=fire, \n    geo=True,\n    crs=4326, \n    frame_width=plot_width,\n    frame_height=plot_height,\n    tiles=\"CartoDark\"\n)\n\n#gv.tile_sources.CartoDark\npoints\n\n\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/set_operations.py:133: RuntimeWarning: invalid value encountered in intersection\n  return lib.intersection(a, b, **kwargs)\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n\n\n\n\n\n\n  \n\n\n\n\n\n\nCode\njoin = gpd.sjoin(building_raw, hk_limit, how='right')#, predicate=\"within\")\n\n\n\n\nCode\nbuilding_area_by_district = join.groupby('ENAME')['Shape__Area_left'].sum().reset_index()\n\n\n\n\nCode\ngdf = pd.merge(\n    hk_limit[[\"geometry\", \"ENAME\"]], building_area_by_district, on=\"ENAME\")\n\n\n\n\nCode\ngdf['building_density'] = gdf['Shape__Area_left'] / hk_limit['Shape__Area']\n\n\n\n\nCode\ngdf.to_file(\"building_file.geojson\", driver='GeoJSON')\n\n\n\n\nCode\ngdf.hvplot(\n    c=\"building_density\", \n    frame_width=600,\n    frame_height=600,\n    cmap=\"bone_r\",\n    geo=True, \n    tiles=\"CartoDark\"\n)\n\n\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/set_operations.py:133: RuntimeWarning: invalid value encountered in intersection\n  return lib.intersection(a, b, **kwargs)\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer(\n/Users/hangzhao/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/shapely/constructive.py:181: RuntimeWarning: invalid value encountered in buffer\n  return lib.buffer("
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#temperature-and-ndvi-are-two-major-factors-when-considering-urban-heat-index",
    "href": "analysis/5-HK-Temp-NDVI.html#temperature-and-ndvi-are-two-major-factors-when-considering-urban-heat-index",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Temperature and NDVI are two major factors when considering Urban Heat Index",
    "text": "Temperature and NDVI are two major factors when considering Urban Heat Index"
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#selection-of-landsat-7-data-for-consistency-with-census-intervals",
    "href": "analysis/5-HK-Temp-NDVI.html#selection-of-landsat-7-data-for-consistency-with-census-intervals",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Selection of Landsat 7 Data for Consistency with Census Intervals",
    "text": "Selection of Landsat 7 Data for Consistency with Census Intervals\n\nThe Urban Heat Index (UHI) analysis in Hong Kong heavily relies on two primary factors: temperature and the Normalized Difference Vegetation Index (NDVI). To align the satellite data with census intervals, we’ve opted for data from Landsat 7 ETM+. The choice of Landsat 7, despite the availability of Landsat 8 and 9, is dictated by the need for consistency with the census data from the Hong Kong government and ESRI Hong Kong, which are available every five years. The most recent census data was from 2021, necessitating the use of data from 2011 and 2016 as well. Given that Landsat 8 started operating in 2013, it wouldn’t cover the entire period corresponding to our census data, leading to the decision to utilize Landsat 7’s data for a comprehensive analysis."
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#methodology-for-accurate-data-retrieval-and-processing",
    "href": "analysis/5-HK-Temp-NDVI.html#methodology-for-accurate-data-retrieval-and-processing",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "",
    "text": "For ensuring accuracy, our approach involved creating a mosaic composite raster image from Google Earth Engine, filtered for the entire year. This process was repeated for each year from 2011 to 2021 to extract the annual mean of temperature and NDVI for each pixel. The most challenging aspect of this section was the calibration of the data retrieved from Google Earth Engine. We encountered numerous difficulties in calibrating the band data. For instance, there were times when the NDVI worked correct (in the range) on Google Earth Engine but failed in Python. Similarly, issues were faced with the land surface temperature data. After countless attempts and explorations, we discovered a calculation method from an academic paper that provided a more refined approach. This method allowed for the conversion of digital numbers, surface reflectance, top of the atmosphere reflectance, top brightness temperature, and land surface temperature in a more accurate way.\n(GEE link:https://code.earthengine.google.com/a1c8085a46f0c89f1d82f0cfcfabacd8)\nReference: Ermida, S.L., Soares, P., Mantas, V., Göttsche, F.-M., Trigo, I.F., 2020. Google Earth Engine open-source code for Land Surface Temperature estimation from the Landsat series. Remote Sensing, 12 (9), 1471; https://doi.org/10.3390/rs12091471\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2503, y: 1783)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.5 114.5 114.5 114.5\n  * y            (y) float64 22.57 22.57 22.57 22.57 ... 22.09 22.09 22.09 22.09\n    spatial_ref  int64 ...\nData variables:\n    band_data    (band, y, x) float32 ...xarray.DatasetDimensions:band: 16x: 2503y: 1783Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.5 114.5array([113.784791, 113.785061, 113.78533 , ..., 114.458528, 114.458797,\n       114.459067])y(y)float6422.57 22.57 22.57 ... 22.09 22.09array([22.57354 , 22.573271, 22.573001, ..., 22.09384 , 22.09357 , 22.093301])spatial_ref()int64...crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647[1 values with dtype=int64]Data variables: (1)band_data(band, y, x)float32...AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')[71405584 values with dtype=float32]Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.78479105264977,   113.785060547235, 113.78533004182023,\n              113.78559953640547, 113.78586903099071, 113.78613852557595,\n              113.78640802016118, 113.78667751474642, 113.78694700933166,\n               113.7872165039169,\n              ...\n              114.45664105364276,   114.456910548228, 114.45718004281322,\n              114.45744953739846,  114.4577190319837, 114.45798852656894,\n              114.45825802115417,  114.4585275157394, 114.45879701032464,\n              114.45906650490988],\n             dtype='float64', name='x', length=2503))yPandasIndexPandasIndex(Float64Index([22.573540195818428,  22.57327070123319, 22.573001206647955,\n               22.57273171206272, 22.572462217477483, 22.572192722892247,\n              22.571923228307014, 22.571653733721778, 22.571384239136542,\n              22.571114744551306,\n              ...\n              22.095726296195256,  22.09545680161002, 22.095187307024784,\n              22.094917812439547,  22.09464831785431, 22.094378823269075,\n               22.09410932868384, 22.093839834098603, 22.093570339513366,\n               22.09330084492813],\n             dtype='float64', name='y', length=1783))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n\n\n\n\n\n(113.835066606914, 22.153344109236, 114.441993257571, 22.5619493489016)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2252, y: 1516)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.4 114.4 114.4 114.4\n  * y            (y) float64 22.56 22.56 22.56 22.56 ... 22.15 22.15 22.15 22.15\n    spatial_ref  int64 0\nData variables:\n    band_data    (band, y, x) float32 1.004e+04 9.852e+03 ... 0.9903 0.9901xarray.DatasetDimensions:band: 16x: 2252y: 1516Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.4 114.4array([113.835187, 113.835456, 113.835726, ..., 114.44128 , 114.441549,\n       114.441819])y(y)float6422.56 22.56 22.56 ... 22.15 22.15array([22.561682, 22.561413, 22.561143, ..., 22.153937, 22.153668, 22.153398])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(band, y, x)float321.004e+04 9.852e+03 ... 0.9901AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')array([[[1.0039000e+04, 9.8520000e+03, 9.8520000e+03, ...,\n         9.3790000e+03, 9.5540000e+03, 9.2050000e+03],\n        [9.9450000e+03, 1.0039000e+04, 1.0039000e+04, ...,\n         9.2910000e+03, 9.2050000e+03, 9.3790000e+03],\n        [9.8520000e+03, 9.9460000e+03, 9.9460000e+03, ...,\n         9.4680000e+03, 9.2910000e+03, 9.2050000e+03],\n        ...,\n        [1.0704000e+04, 1.0804000e+04, 1.0804000e+04, ...,\n         9.5450000e+03, 9.7170000e+03, 9.8020000e+03],\n        [1.0804000e+04, 1.0906000e+04, 1.0604000e+04, ...,\n         9.6320000e+03, 9.8020000e+03, 9.7170000e+03],\n        [1.0804000e+04, 1.0604000e+04, 1.0906000e+04, ...,\n         9.5450000e+03, 9.5450000e+03, 9.6320000e+03]],\n\n       [[1.0514000e+04, 1.0614000e+04, 1.0614000e+04, ...,\n         9.1010000e+03, 9.1010000e+03, 9.0070000e+03],\n        [1.0614000e+04, 1.0514000e+04, 1.0514000e+04, ...,\n         9.1940000e+03, 9.1010000e+03, 9.1940000e+03],\n        [1.0414000e+04, 1.0514000e+04, 1.0614000e+04, ...,\n         9.2880000e+03, 9.1010000e+03, 9.1940000e+03],\n...\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9137042e+02, 2.9137042e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02]],\n\n       [[9.8962820e-01, 9.8978066e-01, 9.8978066e-01, ...,\n         9.8911905e-01, 9.8882079e-01, 9.8896593e-01],\n        [9.8954946e-01, 9.9022216e-01, 9.9022216e-01, ...,\n         9.8911905e-01, 9.8875976e-01, 9.8911905e-01],\n        [9.9013770e-01, 9.8986351e-01, 9.8978066e-01, ...,\n         9.8896772e-01, 9.8926890e-01, 9.8865867e-01],\n        ...,\n        [9.9023283e-01, 9.8983717e-01, 9.9028999e-01, ...,\n         9.9008703e-01, 9.9028999e-01, 9.9008703e-01],\n        [9.9023283e-01, 9.8974222e-01, 9.9004382e-01, ...,\n         9.9028999e-01, 9.9008703e-01, 9.9028999e-01],\n        [9.8992366e-01, 9.8974222e-01, 9.9023283e-01, ...,\n         9.9028999e-01, 9.9028999e-01, 9.9008703e-01]]], dtype=float32)Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981, 113.83653401301505,\n              113.83680350760028, 113.83707300218552, 113.83734249677076,\n                113.837611991356,\n              ...\n              114.43939340018765,  114.4396628947729, 114.43993238935813,\n              114.44020188394337,  114.4404713785286, 114.44074087311384,\n              114.44101036769908, 114.44127986228432, 114.44154935686954,\n              114.44181885145478],\n             dtype='float64', name='x', length=2252))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105,  22.56033496114187,\n              22.560065466556633,   22.5597959719714, 22.559526477386164,\n              22.559256982800928,\n              ...\n               22.15582358870285, 22.155554094117615,  22.15528459953238,\n              22.155015104947143, 22.154745610361907,  22.15447611577667,\n              22.154206621191435,   22.1539371266062, 22.153667632020962,\n              22.153398137435726],\n             dtype='float64', name='y', length=1516))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 1516, x: 2252)\nCoordinates:\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.4 114.4 114.4 114.4\n  * y            (y) float64 22.56 22.56 22.56 22.56 ... 22.15 22.15 22.15 22.15\n    spatial_ref  int64 0\nData variables:\n    band_data    (y, x) float32 -0.0636 -0.06632 -0.06632 ... -0.03526 -0.02509xarray.DatasetDimensions:y: 1516x: 2252Coordinates: (3)x(x)float64113.8 113.8 113.8 ... 114.4 114.4array([113.835187, 113.835456, 113.835726, ..., 114.44128 , 114.441549,\n       114.441819])y(y)float6422.56 22.56 22.56 ... 22.15 22.15array([22.561682, 22.561413, 22.561143, ..., 22.153937, 22.153668, 22.153398])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(y, x)float32-0.0636 -0.06632 ... -0.02509array([[-0.06360051, -0.06632194, -0.06632194, ..., -0.01780916,\n        -0.00751405, -0.01262642],\n       [-0.05900084, -0.08287107, -0.08287107, ..., -0.01780916,\n        -0.00667491, -0.01780916],\n       [-0.07827458, -0.07091723, -0.06632194, ..., -0.01268844,\n        -0.02281629, -0.00155308],\n       ...,\n       [-0.08128203, -0.06840537, -0.08617212, ..., -0.02509378,\n        -0.03017435, -0.02509378],\n       [-0.08128203, -0.06329114, -0.07134316, ..., -0.03017435,\n        -0.02509378, -0.03017435],\n       [-0.07324164, -0.06329114, -0.08128203, ..., -0.03017435,\n        -0.035264  , -0.02509378]], dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981, 113.83653401301505,\n              113.83680350760028, 113.83707300218552, 113.83734249677076,\n                113.837611991356,\n              ...\n              114.43939340018765,  114.4396628947729, 114.43993238935813,\n              114.44020188394337,  114.4404713785286, 114.44074087311384,\n              114.44101036769908, 114.44127986228432, 114.44154935686954,\n              114.44181885145478],\n             dtype='float64', name='x', length=2252))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105,  22.56033496114187,\n              22.560065466556633,   22.5597959719714, 22.559526477386164,\n              22.559256982800928,\n              ...\n               22.15582358870285, 22.155554094117615,  22.15528459953238,\n              22.155015104947143, 22.154745610361907,  22.15447611577667,\n              22.154206621191435,   22.1539371266062, 22.153667632020962,\n              22.153398137435726],\n             dtype='float64', name='y', length=1516))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (x: 5, y: 5)\nCoordinates:\n    band         int64 15\n  * x            (x) float64 113.8 113.8 113.8 113.8 113.8\n  * y            (y) float64 22.56 22.56 22.56 22.56 22.56\n    spatial_ref  int64 0\nData variables:\n    band_data    (y, x) float32 19.86 19.86 19.86 20.4 ... 17.04 17.04 17.04xarray.DatasetDimensions:x: 5y: 5Coordinates: (4)band()int6415array(15)x(x)float64113.8 113.8 113.8 113.8 113.8array([113.835187, 113.835456, 113.835726, 113.835995, 113.836265])y(y)float6422.56 22.56 22.56 22.56 22.56array([22.561682, 22.561413, 22.561143, 22.560874, 22.560604])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(y, x)float3219.86 19.86 19.86 ... 17.04 17.04array([[19.857178, 19.857178, 19.857178, 20.401917, 19.857178],\n       [19.857544, 19.857544, 19.857544, 20.402283, 20.402283],\n       [19.85791 , 19.85791 , 20.40268 , 20.40268 , 19.85791 ],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246]],\n      dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981],\n             dtype='float64', name='x'))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105],\n             dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      ()\nCoordinates:\n    band         int64 15\n    spatial_ref  int64 0\nData variables:\n    band_data    float32 20.17xarray.DatasetDimensions:Coordinates: (2)band()int6415array(15)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data()float3220.17array(20.173859, dtype=float32)Indexes: (0)Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nmean_ndvi_2011\nmax_temp_2016\nmean_ndvi_2016\nmean_temp_2011\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n0.211102\n24.699992\n0.234139\n20.704102\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n0.090806\n26.748404\n0.097568\n23.277648\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n0.121019\n26.426119\n0.136822\n22.402509\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n0.262977\n24.956479\n0.282872\n21.255087\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n0.251814\n22.677352\n0.271825\n19.671759\n\n\n5\n6\n13\n中西區\n中西区\nCENTRAL & WESTERN\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n0.194695\n23.794897\n0.199246\n18.948752\n\n\n6\n7\n14\n灣仔區\n湾仔区\nWAN CHAI\n1.161490e+07\n19548.075298\nMULTIPOLYGON (((114.20012 22.27387, 114.20047 ...\n0.191913\n24.292477\n0.201838\n19.608638\n\n\n7\n8\n15\n東區\n东区\nEASTERN\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n0.213661\n23.827175\n0.236692\n19.821950\n\n\n8\n9\n17\n屯門區\n屯门区\nTUEN MUN\n9.921091e+07\n99074.932441\nMULTIPOLYGON (((113.93745 22.42638, 113.93765 ...\n0.188711\n25.061902\n0.221932\n20.773037\n\n\n9\n10\n18\n元朗區\n元朗区\nYUEN LONG\n1.648768e+08\n91328.856191\nMULTIPOLYGON (((113.93832 22.42696, 113.93843 ...\n0.196683\n23.764657\n0.213754\n20.540728"
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#cluster-analysis",
    "href": "analysis/5-HK-Temp-NDVI.html#cluster-analysis",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Cluster Analysis",
    "text": "Cluster Analysis\nWe will perform K-means Cluster Analysis for our final analytical output.\n\n\nIndex(['NAME_EN', 'NAME_TC', 'total_pop_2016', 'total_pop_2021',\n       'total_pop_2011', 'median_age_2011', 'median_age_2016',\n       'median_age_2021', 'OBJECTID', 'ID', 'CNAME', 'CNAME_S', 'ENAME',\n       'Shape__Area', 'Shape__Length', 'road_length', 'area', 'road_density',\n       'open_space_area', 'mean_temp_2011', 'mean_temp_2016', 'mean_temp_2021',\n       'mean_ndvi_2011', 'mean_ndvi_2016', 'mean_ndvi_2021',\n       'building_density', 'geometry'],\n      dtype='object')\n\n\nWe first import all libraries we need, and then choose the key variables to determine the clustering pattern in our merged dataset, which are: Total population in 2011, 2016, 2021, median age of the population (in three years) for each district in Hong Kong, road density, open space area, mean temperature in three years, mean ndvi (normalized difference vegetation index) in three years, and building density by district.\nInitially, we tested a cluster range for our preliminary testing of the clustering model. Random_state set to 42 so that we can make the randomness deterministic.\n\n\n\n\n\nThis ‘Kneed’ package can help us determine the ‘knee’ point quantitatively. It gives out the number of cluster of 4, which aligns with our initial testing and decision for Scree plot.\nScree plot is one way to determine how many clusters we should input for our kmeans model. From the shape of the curve, we probably will select 3 or 4 for our final number of cluster.\n\n\n4 [2, 3, 4, 5, 6, 7, 8, 9]\n\n\nAfter performing the kmeans analysis, we gives each district a ‘label’ so that we can visualize the cluster on the map.\n\n\n\n\n\n\n\n\n\nlabel\nsize\n\n\n\n\n0\n0\n1\n\n\n1\n1\n5\n\n\n2\n2\n7\n\n\n3\n3\n5\n\n\n\n\n\n\n\nWe finally plot our result as a map. It can be seen that four clusters are shown quite evenly across Hong Kong, except Cluster 0 (in Dark Red) which demonstrates the Hong Kong Island District with airports, few buildings, low population density, mainly mountains and high volume of vegetations).\nIt demonstrates that the pale blue regions (Cluster 2) are remote suburb areas with relatively low population and building density, and are having large areas of parks and natural landscapes. The orange regions (Cluster 1) represents the main populated living area where population densities are high and buildings are dense. Dark Blue (Cluster 3) regions are the main business & entertainment and travel areas where there are many buildings and population, while the area is small so density is high.\n\n\n\n\n\nIf we are to assign names to those clusters, the dark red (cluster 0) will be Emergent Mixed-Use Area, the orange (cluster 1) will be Urban Residential Zone, the pale blue (cluster 2) will be Suburb Oasis, the dark blue (cluster 3) will be Commercial and Entertainment Hub, which is also identifed as with high vulnerbility to future urban heat index."
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#appendix",
    "href": "analysis/5-HK-Temp-NDVI.html#appendix",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "Appendix",
    "text": "Appendix\n(https://code.earthengine.google.com/531a9a4d8b3a6c1a3fafab218f7d7159).\nNavigating Data Source Challenges in Urban Heat Index Analysis Acquiring and utilizing data for our Urban Heat Index analysis involved a series of steps and challenges, particularly in data calibration and exportation. Our primary data source was a feature collection from the Google Earth Engine (GEE), which provided us with Landsat 7 satellite imagery. We initially started with the Raw Scene version of the Landsat 7 data. This version had no calibration applied to the digital numbers, meaning the data was in its most unprocessed form.\nSubsequently, we discovered the “Top of Atmosphere” (TOA) version of the Landsat 7 data, which had been converted by the US Geological Survey (USGS). This TOA version seemed promising and functioned well within the Google Earth Engine environment. However, we encountered a significant issue when exporting the data from GEE to Python. Specifically, Band 3 and Band 4 values were altered during this export process. This alteration led to the NDVI values falling outside the expected range of -1 to 1, a puzzling issue that we struggled to resolve.\nTo address this, we implemented cloud masks to remove the impact of cloud cover from our analysis, hoping this would correct the discrepancies in the NDVI values. Unfortunately, this step did not yield the desired results. The problem might lie in exporting the data, particularly the stage where data is transferred to Google Drive. The data, when downloaded, undergoes a zipping and unzipping process on our laptops. We hypothesized that this process could potentially alter the band values for Band 3, 4, and 6 (the Thermal Band similar to Landsat 8, Band 10, and Band 11), resulting in the discrepancies we observed."
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#httpscode.earthengine.google.com531a9a4d8b3a6c1a3fafab218f7d7159.",
    "href": "analysis/5-HK-Temp-NDVI.html#httpscode.earthengine.google.com531a9a4d8b3a6c1a3fafab218f7d7159.",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "(https://code.earthengine.google.com/531a9a4d8b3a6c1a3fafab218f7d7159).",
    "text": "(https://code.earthengine.google.com/531a9a4d8b3a6c1a3fafab218f7d7159).\n\nNavigating Data Source Challenges in Urban Heat Index Analysis\n\n\nThe process of acquiring and utilizing data for our Urban Heat Index analysis involved a series of steps and challenges, particularly in the context of data calibration and exportation. Our primary data source was a feature collection from the Google Earth Engine (GEE), which provided us with Landsat 7 satellite imagery. We initially started with the Raw Scene version of the Landsat 7 data. This version had no calibration applied to the digital numbers, which meant that the data was in its most unprocessed form.\n\n\nSubsequently, we discovered the “Top of Atmosphere” (TOA) version of the Landsat 7 data, which had been converted by the US Geological Survey (USGS). This TOA version seemed promising and functioned well within the Google Earth Engine environment. However, we encountered a significant issue when exporting the data from GEE to Python. Specifically, the values for Band 3 and Band 4 were altered during this export process. This alteration led to the NDVI values falling outside the expected range of -1 to 1, a puzzling issue that we struggled to resolve.\n\n\nIn an attempt to address this, we implemented cloud masks to remove the impact of cloud cover from our analysis, hoping this would correct the discrepancies in the NDVI values. Unfortunately, this step did not yield the desired results. We speculated that the problem might lie in the process of exporting the data, particularly the step where data is transferred to Google Drive. The data, when downloaded, undergoes a zipping and unzipping process on our laptops. We hypothesized that this process could potentially alter the band values for Band 3, 4, and 6 (the Thermal Band similar to Landsat 8 Band 10 and Band 11), resulting in the discrepancies we observed"
  },
  {
    "objectID": "analysis/4-Pop-Road-Zoning.html",
    "href": "analysis/4-Pop-Road-Zoning.html",
    "title": "Data Exploratory: Continued",
    "section": "",
    "text": "Code\n# The imports\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport requests\nimport geopandas as gpd\nimport hvplot.pandas\nimport rasterio as rio\nimport rioxarray\nimport xarray as xr\nimport hvplot.xarray\nimport panel as pn\nimport osmnx as ox\nfrom shapely.geometry import Point\nimport seaborn as sns\nimport contextily as ctx\n\n# Make sure plots show up in JupyterLab!\n%matplotlib inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. Hong Kong Population\nAreas with higher populations tend to experience a more pronounced UHI effect due to increased heat generation and retention associated with human activities and urban infrastructure. As such, we collect 2011/2016/2021 demographic data from Hong Kong Common Spatial Data Infrastructure Portal to see the distribution and trend of population. Specifically, we look into total population and average age in the exploratory analysis.\n\n\n\n\n\n\n\n\n\nOBJECTID\n分區\nDistrict\n人口密度\nPopulation_Density\nShape__Area\nShape__Length\n總人口\nTotal_population\ngeometry\n\n\n\n\n0\n1\n黃大仙\nWong Tai Sin\n43730\n43730\n1.092784e+07\n17995.640782\n406802\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n九龍城\nKowloon City\n40994\n40994\n1.184286e+07\n31834.409404\n410634\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n觀塘\nKwun Tong\n59704\n59704\n1.322124e+07\n25496.700164\n673166\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n西貢\nSai Kung\n3771\n3771\n1.602944e+08\n365545.476363\n489037\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n北區\nNorth\n2269\n2269\n1.619184e+08\n192815.532996\n309631\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nDistrict\nPopulation_Density\nShape__Area\nShape__Length\nTotal_population\ngeometry\n\n\n\n\n0\n1\nWong Tai Sin\n43730\n1.092784e+07\n17995.640782\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\nKowloon City\n40994\n1.184286e+07\n31834.409404\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\nKwun Tong\n59704\n1.322124e+07\n25496.700164\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\nSai Kung\n3771\n1.602944e+08\n365545.476363\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\nNorth\n2269\n1.619184e+08\n192815.532996\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\nAs seen in the map, the population is primarily concentrated in the central urban districts, which include Kwun Tong District, Yau Tsim Mong District, Kowloon City District, Wong Tai Sin District, Sham Shui Po District, and Eastern District across Victoria Harbour. The population density diminishes as the distance from the center increases.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n&lt;Response [200]&gt;\n\n\n\n\n&lt;Response [200]&gt;\n\n\nWe have developed an interactive dashboard that provides demographic data for the years 2011, 2016, and 2021, organized by District Council District. This dashboard offers a detailed breakdown of densely populated areas, with a particular focus on the central urban district. Interestingly, we can also identify numerous smaller districts with significant population clusters in the outskirts of Hong Kong. For average age distribution especially in recent years, they are more likely to cluster in the core areas, followed by the New Territories in the north.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\ngeometry\ndc_eng_x\ndcca_eng\nca_eng_x\ntotal_pop_2016\nmedian_age_2016\ntotal_pop_2021\nmedian_age_2021\ntotal_pop_2011\nmedian_age_2011\nindex_right\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\n\n\n\n\n193\nMULTIPOLYGON (((114.12785 22.35163, 114.12745 ...\nKwai Tsing\nKwai Tsing - Lai King\nLai King\n13985\n49.1\n13658\n53.4\n14768\n46.3\n12\n13\n4\n深水埗區\n深水埗区\nSHAM SHUI PO\n1.100815e+07\n28395.306312\n\n\n\n\n\n\n\n\n\n2. Road Network\nUrban Heat Island is related with transportation infrastructure as well, especially in densely populated cities like Hong Kong. As such, we further explore the this factor in the perspective of road network. Specifically, we’ll further investigate into road length and road density within 18 districts in Hong Kong.\n\nRetrieve Road Network from Open Street Map\nAs we can see from the exploratory map, the form and density of Hong Kong’s road network are highly influenced by its hilly and mountainous terrain, resulting in a dispersed, complex, and high-density configuration. Hong Kong has a relatively well-developed road transportation network, but due to the presence of extensive urban development and roads, urban areas are prone to absorbing and storing heat, leading to relatively higher temperatures within the city.\n\n\n\n\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCalculate Road Length & Density in 18 Districts\n\n\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\nlength\n\n\n\n\n0\nCENTRAL & WESTERN\n184421.695\n\n\n1\nEASTERN\n196191.617\n\n\n2\nISLANDS\n347799.377\n\n\n3\nKOWLOON CITY\n200720.061\n\n\n4\nKWAI TSING\n325607.738\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n\n\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\625515033.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  hk_limit['area'] = hk_limit['geometry'].area / 1e6\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n8.156332e-10\n1.418236e+14\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n9.870107e-10\n2.338801e+14\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n1.196284e-08\n3.180799e+13\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n1.207042e-08\n3.608532e+13\n\n\n\n\n\n\n\nIt appears that the highest road network density is concentrated in the central and most urbanized districts of Hong Kong, such as Yau Tsim Mong, Kowloon City, and Sham Shui Po districts. Notably, Yuen Long District in the north stands as an exception, displaying relatively robust road network density. Conversely, as one moves farther away from the core districts, particularly towards the coastline, there is a gradual decline in road network density. The areas characterized by the lowest densities and minimal road infrastructure tend to be situated in remote or rural locations. Additionally, these areas may encompass the outlying islands or protected regions within the New Territories.\n\n\n\n\n\n\n\n\n3. Land Use/ Zoning\nLand use/ zoning also has a significant impact on the Urban Heat Island as well, as different types of land use can either mitigate or exacerbate the heat. In the context of Hong Kong, it boosts a wide range of open space like the green belt, agriculture, recreation areas, country parks, etc, which can mitigate the heat significance. Conversely, areas with intensive human activities and built environments tend to experience higher temperatures.\n\nFilter Open Space Part within Land Use/Zoning\nWithin the zoning map, we have identified and selected land types with the potential to mitigate the influence of the Urban Heat Island. These include areas designated as open space, green belts, conservation areas, recreational sites, agricultural land, pedestrian streets, and coastal protection areas. These selected zones will be plotted to highlight their distribution and potential cooling effect on the urban environment.\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\516839381.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  zoning_select['center']=zoning_select.geometry.centroid\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID_left\nID\nCNAME\nCNAME_S\nShape__Area_left\nShape__Length_left\ngeometry\nroad_length\narea\nroad_density\nindex_right\nOBJECTID_right\nPLAN_NO\nZONE_LABEL\nDESC_ENG\nDESC_CHT\nSPUSE_ENG\nSPUSE_CHT\nSHAPE_Leng\nShape__Area_right\nShape__Length_right\ncenter\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n899\n900\nS/H1/22\nOU\nOther Specified Uses\n其他指定用途\nPUBLIC MORTUARY\n公眾殮房\n233.257105\n2865.110779\n233.257108\nPOINT (114.11725 22.27801)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n12.511457\n\n\n1\nEASTERN\n15.717715\n\n\n2\nISLANDS\n93.395277\n\n\n3\nKOWLOON CITY\n4.043059\n\n\n4\nKWAI TSING\n16.084105\n\n\n5\nKWUN TONG\n8.248983\n\n\n6\nNORTH\n72.372960\n\n\n7\nSAI KUNG\n38.122037\n\n\n8\nSHA TIN\n25.508923\n\n\n9\nSHAM SHUI PO\n6.539740\n\n\n10\nSOUTHERN\n30.205835\n\n\n11\nTAI PO\n39.991753\n\n\n12\nTSUEN WAN\n25.119254\n\n\n13\nTUEN MUN\n23.514369\n\n\n14\nWAN CHAI\n11.311346\n\n\n15\nWONG TAI SIN\n3.320487\n\n\n16\nYAU TSIM MONG\n2.894091\n\n\n17\nYUEN LONG\n76.750176\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID\nID\nCNAME\nCNAME_S\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n12.511457\n\n\n1\nEASTERN\n627887\n598232\n632158\n43.977500\n44.047500\n48.742500\n8\n15\n東區\n东区\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n196191.617\n1.631095e-09\n1.202822e+14\n15.717715\n\n\n2\nISLANDS\n106179\n105513\n87160\n39.280000\n42.060000\n42.640000\n12\n2\n離島區\n离岛区\n2.092858e+08\n352295.332949\nMULTIPOLYGON (((113.92250 22.15339, 113.92241 ...\n347799.377\n1.563092e-08\n2.225073e+13\n93.395277\n\n\n3\nKOWLOON CITY\n619041\n599881\n609338\n43.321622\n44.024324\n46.962162\n2\n6\n九龍城區\n九龙城区\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n4.043059\n\n\n4\nKWAI TSING\n619133\n576820\n638052\n42.177778\n44.091667\n48.169444\n15\n3\n葵青區\n葵青区\n2.741789e+07\n56502.167657\nMULTIPOLYGON (((114.09501 22.32524, 114.09501 ...\n325607.738\n2.046340e-09\n1.591171e+14\n16.084105"
  },
  {
    "objectID": "analysis/4-Pop-Road-Zoning.html#final-project",
    "href": "analysis/4-Pop-Road-Zoning.html#final-project",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "",
    "text": "Team: Hang Zhao, George Chen, Ling Chen"
  },
  {
    "objectID": "analysis/4-Pop-Road-Zoning.html#available-dataset-sources",
    "href": "analysis/4-Pop-Road-Zoning.html#available-dataset-sources",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "Available Dataset & Sources",
    "text": "Available Dataset & Sources\n\nHK data gov Hong Kong Government Open Data\npolyU sources Hong Kong PolyU open data sources\nHK Observatory Hong Kong Observatory\nHK CSDI Portal Hong Kong CSDI Spatial Data Portal\nESRI China ESRI China (Hong Kong) Geospatial Data\n\n\n\nCode\n# The imports\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport requests\nimport geopandas as gpd\nimport hvplot.pandas\nimport rasterio as rio\nimport rioxarray\nimport xarray as xr\nimport hvplot.xarray\nimport panel as pn\nimport osmnx as ox\nfrom shapely.geometry import Point\nimport seaborn as sns\nimport contextily as ctx\n\n# Make sure plots show up in JupyterLab!\n%matplotlib inline"
  },
  {
    "objectID": "analysis/4-Pop-Road-Zoning.html#data-exploratory",
    "href": "analysis/4-Pop-Road-Zoning.html#data-exploratory",
    "title": "MUSA550 Geospatial Data Science in Python",
    "section": "Data Exploratory",
    "text": "Data Exploratory\n\n1. Hong Kong Population\nAreas with higher populations tend to experience a more pronounced UHI effect due to increased heat generation and retention associated with human activities and urban infrastructure. As such, we collect 2011/2016/2021 demographic data from Hong Kong Common Spatial Data Infrastructure Portal to see the distribution and trend of population. Specifically, we look into total population and average age in the exploratory analysis.\n\n\n\n\n\n\n\n\n\nOBJECTID\n分區\nDistrict\n人口密度\nPopulation_Density\nShape__Area\nShape__Length\n總人口\nTotal_population\ngeometry\n\n\n\n\n0\n1\n黃大仙\nWong Tai Sin\n43730\n43730\n1.092784e+07\n17995.640782\n406802\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n九龍城\nKowloon City\n40994\n40994\n1.184286e+07\n31834.409404\n410634\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n觀塘\nKwun Tong\n59704\n59704\n1.322124e+07\n25496.700164\n673166\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n西貢\nSai Kung\n3771\n3771\n1.602944e+08\n365545.476363\n489037\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n北區\nNorth\n2269\n2269\n1.619184e+08\n192815.532996\n309631\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nDistrict\nPopulation_Density\nShape__Area\nShape__Length\nTotal_population\ngeometry\n\n\n\n\n0\n1\nWong Tai Sin\n43730\n1.092784e+07\n17995.640782\n406802\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\nKowloon City\n40994\n1.184286e+07\n31834.409404\n410634\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\nKwun Tong\n59704\n1.322124e+07\n25496.700164\n673166\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\nSai Kung\n3771\n1.602944e+08\n365545.476363\n489037\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\nNorth\n2269\n1.619184e+08\n192815.532996\n309631\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\nAs seen in the map, the population is primarily concentrated in the central urban districts, which include Kwun Tong District, Yau Tsim Mong District, Kowloon City District, Wong Tai Sin District, Sham Shui Po District, and Eastern District across Victoria Harbour. The population density diminishes as the distance from the center increases.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n&lt;Response [200]&gt;\n\n\n\n\n&lt;Response [200]&gt;\n\n\nWe have developed an interactive dashboard that provides demographic data for the years 2011, 2016, and 2021, organized by District Council District. This dashboard offers a detailed breakdown of densely populated areas, with a particular focus on the central urban district. Interestingly, we can also identify numerous smaller districts with significant population clusters in the outskirts of Hong Kong. For average age distribution especially in recent years, they are more likely to cluster in the core areas, followed by the New Territories in the north.\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\ngeometry\ndc_eng_x\ndcca_eng\nca_eng_x\ntotal_pop_2016\nmedian_age_2016\ntotal_pop_2021\nmedian_age_2021\ntotal_pop_2011\nmedian_age_2011\nindex_right\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\n\n\n\n\n193\nMULTIPOLYGON (((114.12785 22.35163, 114.12745 ...\nKwai Tsing\nKwai Tsing - Lai King\nLai King\n13985\n49.1\n13658\n53.4\n14768\n46.3\n12\n13\n4\n深水埗區\n深水埗区\nSHAM SHUI PO\n1.100815e+07\n28395.306312\n\n\n\n\n\n\n\n\n\n2. Road Network\nUrban Heat Island is related with transportation infrastructure as well, especially in densely populated cities like Hong Kong. As such, we further explore the this factor in the perspective of road network. Specifically, we’ll further investigate into road length and road density within 18 districts in Hong Kong.\n\nRetrieve Road Network from Open Street Map\nAs we can see from the exploratory map, the form and density of Hong Kong’s road network are highly influenced by its hilly and mountainous terrain, resulting in a dispersed, complex, and high-density configuration. Hong Kong has a relatively well-developed road transportation network, but due to the presence of extensive urban development and roads, urban areas are prone to absorbing and storing heat, leading to relatively higher temperatures within the city.\n\n\n\n\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCalculate Road Length & Density in 18 Districts\n\n\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\nlength\n\n\n\n\n0\nCENTRAL & WESTERN\n184421.695\n\n\n1\nEASTERN\n196191.617\n\n\n2\nISLANDS\n347799.377\n\n\n3\nKOWLOON CITY\n200720.061\n\n\n4\nKWAI TSING\n325607.738\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n\n\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\625515033.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  hk_limit['area'] = hk_limit['geometry'].area / 1e6\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n115676.019\n8.156332e-10\n1.418236e+14\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n230842.202\n9.870107e-10\n2.338801e+14\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n380513.770\n1.196284e-08\n3.180799e+13\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n435564.873\n1.207042e-08\n3.608532e+13\n\n\n\n\n\n\n\nIt appears that the highest road network density is concentrated in the central and most urbanized districts of Hong Kong, such as Yau Tsim Mong, Kowloon City, and Sham Shui Po districts. Notably, Yuen Long District in the north stands as an exception, displaying relatively robust road network density. Conversely, as one moves farther away from the core districts, particularly towards the coastline, there is a gradual decline in road network density. The areas characterized by the lowest densities and minimal road infrastructure tend to be situated in remote or rural locations. Additionally, these areas may encompass the outlying islands or protected regions within the New Territories.\n\n\n\n\n\n\n\n\n3. Land Use/ Zoning\nLand use/ zoning also has a significant impact on the Urban Heat Island as well, as different types of land use can either mitigate or exacerbate the heat. In the context of Hong Kong, it boosts a wide range of open space like the green belt, agriculture, recreation areas, country parks, etc, which can mitigate the heat significance. Conversely, areas with intensive human activities and built environments tend to experience higher temperatures.\n\nFilter Open Space Part within Land Use/Zoning\nWithin the zoning map, we have identified and selected land types with the potential to mitigate the influence of the Urban Heat Island. These include areas designated as open space, green belts, conservation areas, recreational sites, agricultural land, pedestrian streets, and coastal protection areas. These selected zones will be plotted to highlight their distribution and potential cooling effect on the urban environment.\n\n\n\n\n\n\n\nC:\\Users\\wawdj\\AppData\\Local\\Temp\\ipykernel_2392\\516839381.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  zoning_select['center']=zoning_select.geometry.centroid\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\nC:\\Users\\wawdj\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID_left\nID\nCNAME\nCNAME_S\nShape__Area_left\nShape__Length_left\ngeometry\nroad_length\narea\nroad_density\nindex_right\nOBJECTID_right\nPLAN_NO\nZONE_LABEL\nDESC_ENG\nDESC_CHT\nSPUSE_ENG\nSPUSE_CHT\nSHAPE_Leng\nShape__Area_right\nShape__Length_right\ncenter\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2673\n2674\nS/H10/20\nGB\nGreen Belt\n綠化地帶\n\n\n6581.348959\n619008.682861\n6581.349029\nPOINT (114.14239 22.25675)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n899\n900\nS/H1/22\nOU\nOther Specified Uses\n其他指定用途\nPUBLIC MORTUARY\n公眾殮房\n233.257105\n2865.110779\n233.257108\nPOINT (114.11725 22.27801)\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n10\nSOUTHERN\n355603\n339536\n355804\n43.250000\n44.545455\n48.404545\n11\n16\n南區\n南区\n4.644934e+07\n112548.313475\nMULTIPOLYGON (((114.11777 22.27384, 114.11853 ...\n210406.422\n3.469477e-09\n6.064499e+13\n2758\n2759\nS/H10/20\nCP\nCountry Park\n郊野公園\n\n\n1701.978533\n97797.222290\n1701.978533\nPOINT (114.14161 22.26246)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n12.511457\n\n\n1\nEASTERN\n15.717715\n\n\n2\nISLANDS\n93.395277\n\n\n3\nKOWLOON CITY\n4.043059\n\n\n4\nKWAI TSING\n16.084105\n\n\n5\nKWUN TONG\n8.248983\n\n\n6\nNORTH\n72.372960\n\n\n7\nSAI KUNG\n38.122037\n\n\n8\nSHA TIN\n25.508923\n\n\n9\nSHAM SHUI PO\n6.539740\n\n\n10\nSOUTHERN\n30.205835\n\n\n11\nTAI PO\n39.991753\n\n\n12\nTSUEN WAN\n25.119254\n\n\n13\nTUEN MUN\n23.514369\n\n\n14\nWAN CHAI\n11.311346\n\n\n15\nWONG TAI SIN\n3.320487\n\n\n16\nYAU TSIM MONG\n2.894091\n\n\n17\nYUEN LONG\n76.750176\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENAME\ntotal_pop_2016\ntotal_pop_2021\ntotal_pop_2011\nmedian_age_2011\nmedian_age_2016\nmedian_age_2021\nOBJECTID\nID\nCNAME\nCNAME_S\nShape__Area\nShape__Length\ngeometry\nroad_length\narea\nroad_density\nShape__Area_right\n\n\n\n\n0\nCENTRAL & WESTERN\n340334\n326280\n346841\n42.238095\n44.076190\n45.547619\n6\n13\n中西區\n中西区\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n184421.695\n1.090622e-09\n1.690977e+14\n12.511457\n\n\n1\nEASTERN\n627887\n598232\n632158\n43.977500\n44.047500\n48.742500\n8\n15\n東區\n东区\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n196191.617\n1.631095e-09\n1.202822e+14\n15.717715\n\n\n2\nISLANDS\n106179\n105513\n87160\n39.280000\n42.060000\n42.640000\n12\n2\n離島區\n离岛区\n2.092858e+08\n352295.332949\nMULTIPOLYGON (((113.92250 22.15339, 113.92241 ...\n347799.377\n1.563092e-08\n2.225073e+13\n93.395277\n\n\n3\nKOWLOON CITY\n619041\n599881\n609338\n43.321622\n44.024324\n46.962162\n2\n6\n九龍城區\n九龙城区\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n200720.061\n9.172815e-10\n2.188206e+14\n4.043059\n\n\n4\nKWAI TSING\n619133\n576820\n638052\n42.177778\n44.091667\n48.169444\n15\n3\n葵青區\n葵青区\n2.741789e+07\n56502.167657\nMULTIPOLYGON (((114.09501 22.32524, 114.09501 ...\n325607.738\n2.046340e-09\n1.591171e+14\n16.084105"
  },
  {
    "objectID": "analysis/1-HK-Topography.html",
    "href": "analysis/1-HK-Topography.html",
    "title": "Hong Kong Topography Map",
    "section": "",
    "text": "Code\n# import library\nimport xarray as xr\nimport hvplot.xarray\nimport hvplot.pandas\nimport rasterio as rio\nimport rioxarray\nfrom matplotlib import pyplot as plt\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Source: Lands Department HongKong\nhttps://www.landsd.gov.hk/landsd_psi_data/SMO/image/B200K_R500index-geo.tif\n\n# Get image and plot\ntopo_url = (\n    \"https://www.landsd.gov.hk/landsd_psi_data/SMO/image/B200K_R500index-geo.tif\")\ntopo_data = xr.open_dataset(topo_url, engine=\"rasterio\")\n\n#topo_map = topo_data.hvplot.image('x', 'y', width=700, height=500, cmap=\"copper\", geo=True)\n\nAn introductory map presents Hong Kong’s topography using a gradient color bar ranging from dark to light brown. This map effectively highlights the complexity of Hong Kong’s landscape, emphasizing the limited space available for development. It illustrates why there is a high population density in regions of low elevation, where people tend to gather, while the mountainous areas are less populated. This also demonstrates the significant risk of landslides in the event of heavy rainfall or storms, as well as the potential for rainwater accumulation in densely populated areas, posing a serious flood risks."
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html",
    "href": "analysis/5-HK-Temp-NDVI.html",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "",
    "text": "Temperature and NDVI are two major factors when considering Urban Heat Index Selection of Landsat 7 Data for Consistency with Census Intervals The Urban Heat Index (UHI) analysis in Hong Kong heavily relies on two primary factors: temperature and the Normalized Difference Vegetation Index (NDVI). To align the satellite data with census intervals, we’ve opted for data from Landsat 7 ETM+. The choice of Landsat 7, despite the availability of Landsat 8 and 9, is dictated by the need for consistency with the census data from the Hong Kong government and ESRI Hong Kong, which are available every five years. The most recent census data was from 2021, necessitating the use of data from 2011 and 2016 as well. Given that Landsat 8 started operating in 2013, it wouldn’t cover the entire period corresponding to our census data, leading to the decision to utilize Landsat 7’s data for a comprehensive analysis.\n\n\n\nFor ensuring accuracy, our approach involved creating a mosaic composite raster image from Google Earth Engine, filtered for the entire year. This process was repeated for each year from 2011 to 2021 to extract the annual mean of temperature and NDVI for each pixel. The most challenging aspect of this section was the calibration of the data retrieved from Google Earth Engine. We encountered numerous difficulties in calibrating the band data. For instance, there were times when the NDVI worked correct (in the range) on Google Earth Engine but failed in Python. Similarly, issues were faced with the land surface temperature data. After countless attempts and explorations, we discovered a calculation method from an academic paper that provided a more refined approach. This method allowed for the conversion of digital numbers, surface reflectance, top of the atmosphere reflectance, top brightness temperature, and land surface temperature in a more accurate way.\n(GEE link:https://code.earthengine.google.com/a1c8085a46f0c89f1d82f0cfcfabacd8)\nReference: Ermida, S.L., Soares, P., Mantas, V., Göttsche, F.-M., Trigo, I.F., 2020. Google Earth Engine open-source code for Land Surface Temperature estimation from the Landsat series. Remote Sensing, 12 (9), 1471; https://doi.org/10.3390/rs12091471\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2503, y: 1783)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.5 114.5 114.5 114.5\n  * y            (y) float64 22.57 22.57 22.57 22.57 ... 22.09 22.09 22.09 22.09\n    spatial_ref  int64 ...\nData variables:\n    band_data    (band, y, x) float32 ...xarray.DatasetDimensions:band: 16x: 2503y: 1783Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.5 114.5array([113.784791, 113.785061, 113.78533 , ..., 114.458528, 114.458797,\n       114.459067])y(y)float6422.57 22.57 22.57 ... 22.09 22.09array([22.57354 , 22.573271, 22.573001, ..., 22.09384 , 22.09357 , 22.093301])spatial_ref()int64...crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647[1 values with dtype=int64]Data variables: (1)band_data(band, y, x)float32...AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')[71405584 values with dtype=float32]Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.78479105264977,   113.785060547235, 113.78533004182023,\n              113.78559953640547, 113.78586903099071, 113.78613852557595,\n              113.78640802016118, 113.78667751474642, 113.78694700933166,\n               113.7872165039169,\n              ...\n              114.45664105364276,   114.456910548228, 114.45718004281322,\n              114.45744953739846,  114.4577190319837, 114.45798852656894,\n              114.45825802115417,  114.4585275157394, 114.45879701032464,\n              114.45906650490988],\n             dtype='float64', name='x', length=2503))yPandasIndexPandasIndex(Float64Index([22.573540195818428,  22.57327070123319, 22.573001206647955,\n               22.57273171206272, 22.572462217477483, 22.572192722892247,\n              22.571923228307014, 22.571653733721778, 22.571384239136542,\n              22.571114744551306,\n              ...\n              22.095726296195256,  22.09545680161002, 22.095187307024784,\n              22.094917812439547,  22.09464831785431, 22.094378823269075,\n               22.09410932868384, 22.093839834098603, 22.093570339513366,\n               22.09330084492813],\n             dtype='float64', name='y', length=1783))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\ngeopandas.geodataframe.GeoDataFrame\n\n\n\n\n\n\n\n(113.835066606914, 22.153344109236, 114.441993257571, 22.5619493489016)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (band: 16, x: 2252, y: 1516)\nCoordinates:\n  * band         (band) int64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.4 114.4 114.4 114.4\n  * y            (y) float64 22.56 22.56 22.56 22.56 ... 22.15 22.15 22.15 22.15\n    spatial_ref  int64 0\nData variables:\n    band_data    (band, y, x) float32 1.004e+04 9.852e+03 ... 0.9903 0.9901xarray.DatasetDimensions:band: 16x: 2252y: 1516Coordinates: (4)band(band)int641 2 3 4 5 6 7 ... 11 12 13 14 15 16array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])x(x)float64113.8 113.8 113.8 ... 114.4 114.4array([113.835187, 113.835456, 113.835726, ..., 114.44128 , 114.441549,\n       114.441819])y(y)float6422.56 22.56 22.56 ... 22.15 22.15array([22.561682, 22.561413, 22.561143, ..., 22.153937, 22.153668, 22.153398])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(band, y, x)float321.004e+04 9.852e+03 ... 0.9901AREA_OR_POINT :Arealong_name :('SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL', 'NDVI', 'FVC', 'TPW', 'TPWpos', 'EM', 'B6_VCID_1', 'B6_VCID_2', 'LST', 'BBE')array([[[1.0039000e+04, 9.8520000e+03, 9.8520000e+03, ...,\n         9.3790000e+03, 9.5540000e+03, 9.2050000e+03],\n        [9.9450000e+03, 1.0039000e+04, 1.0039000e+04, ...,\n         9.2910000e+03, 9.2050000e+03, 9.3790000e+03],\n        [9.8520000e+03, 9.9460000e+03, 9.9460000e+03, ...,\n         9.4680000e+03, 9.2910000e+03, 9.2050000e+03],\n        ...,\n        [1.0704000e+04, 1.0804000e+04, 1.0804000e+04, ...,\n         9.5450000e+03, 9.7170000e+03, 9.8020000e+03],\n        [1.0804000e+04, 1.0906000e+04, 1.0604000e+04, ...,\n         9.6320000e+03, 9.8020000e+03, 9.7170000e+03],\n        [1.0804000e+04, 1.0604000e+04, 1.0906000e+04, ...,\n         9.5450000e+03, 9.5450000e+03, 9.6320000e+03]],\n\n       [[1.0514000e+04, 1.0614000e+04, 1.0614000e+04, ...,\n         9.1010000e+03, 9.1010000e+03, 9.0070000e+03],\n        [1.0614000e+04, 1.0514000e+04, 1.0514000e+04, ...,\n         9.1940000e+03, 9.1010000e+03, 9.1940000e+03],\n        [1.0414000e+04, 1.0514000e+04, 1.0614000e+04, ...,\n         9.2880000e+03, 9.1010000e+03, 9.1940000e+03],\n...\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9195679e+02, 2.9195679e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02],\n        [2.9137042e+02, 2.9137042e+02, 2.9195679e+02, ...,\n         2.9790427e+02, 2.9790427e+02, 2.9790427e+02]],\n\n       [[9.8962820e-01, 9.8978066e-01, 9.8978066e-01, ...,\n         9.8911905e-01, 9.8882079e-01, 9.8896593e-01],\n        [9.8954946e-01, 9.9022216e-01, 9.9022216e-01, ...,\n         9.8911905e-01, 9.8875976e-01, 9.8911905e-01],\n        [9.9013770e-01, 9.8986351e-01, 9.8978066e-01, ...,\n         9.8896772e-01, 9.8926890e-01, 9.8865867e-01],\n        ...,\n        [9.9023283e-01, 9.8983717e-01, 9.9028999e-01, ...,\n         9.9008703e-01, 9.9028999e-01, 9.9008703e-01],\n        [9.9023283e-01, 9.8974222e-01, 9.9004382e-01, ...,\n         9.9028999e-01, 9.9008703e-01, 9.9028999e-01],\n        [9.8992366e-01, 9.8974222e-01, 9.9023283e-01, ...,\n         9.9028999e-01, 9.9028999e-01, 9.9008703e-01]]], dtype=float32)Indexes: (3)bandPandasIndexPandasIndex(Int64Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64', name='band'))xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981, 113.83653401301505,\n              113.83680350760028, 113.83707300218552, 113.83734249677076,\n                113.837611991356,\n              ...\n              114.43939340018765,  114.4396628947729, 114.43993238935813,\n              114.44020188394337,  114.4404713785286, 114.44074087311384,\n              114.44101036769908, 114.44127986228432, 114.44154935686954,\n              114.44181885145478],\n             dtype='float64', name='x', length=2252))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105,  22.56033496114187,\n              22.560065466556633,   22.5597959719714, 22.559526477386164,\n              22.559256982800928,\n              ...\n               22.15582358870285, 22.155554094117615,  22.15528459953238,\n              22.155015104947143, 22.154745610361907,  22.15447611577667,\n              22.154206621191435,   22.1539371266062, 22.153667632020962,\n              22.153398137435726],\n             dtype='float64', name='y', length=1516))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 1516, x: 2252)\nCoordinates:\n  * x            (x) float64 113.8 113.8 113.8 113.8 ... 114.4 114.4 114.4 114.4\n  * y            (y) float64 22.56 22.56 22.56 22.56 ... 22.15 22.15 22.15 22.15\n    spatial_ref  int64 0\nData variables:\n    band_data    (y, x) float32 -0.0636 -0.06632 -0.06632 ... -0.03526 -0.02509xarray.DatasetDimensions:y: 1516x: 2252Coordinates: (3)x(x)float64113.8 113.8 113.8 ... 114.4 114.4array([113.835187, 113.835456, 113.835726, ..., 114.44128 , 114.441549,\n       114.441819])y(y)float6422.56 22.56 22.56 ... 22.15 22.15array([22.561682, 22.561413, 22.561143, ..., 22.153937, 22.153668, 22.153398])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(y, x)float32-0.0636 -0.06632 ... -0.02509array([[-0.06360051, -0.06632194, -0.06632194, ..., -0.01780916,\n        -0.00751405, -0.01262642],\n       [-0.05900084, -0.08287107, -0.08287107, ..., -0.01780916,\n        -0.00667491, -0.01780916],\n       [-0.07827458, -0.07091723, -0.06632194, ..., -0.01268844,\n        -0.02281629, -0.00155308],\n       ...,\n       [-0.08128203, -0.06840537, -0.08617212, ..., -0.02509378,\n        -0.03017435, -0.02509378],\n       [-0.08128203, -0.06329114, -0.07134316, ..., -0.03017435,\n        -0.02509378, -0.03017435],\n       [-0.07324164, -0.06329114, -0.08128203, ..., -0.03017435,\n        -0.035264  , -0.02509378]], dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981, 113.83653401301505,\n              113.83680350760028, 113.83707300218552, 113.83734249677076,\n                113.837611991356,\n              ...\n              114.43939340018765,  114.4396628947729, 114.43993238935813,\n              114.44020188394337,  114.4404713785286, 114.44074087311384,\n              114.44101036769908, 114.44127986228432, 114.44154935686954,\n              114.44181885145478],\n             dtype='float64', name='x', length=2252))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105,  22.56033496114187,\n              22.560065466556633,   22.5597959719714, 22.559526477386164,\n              22.559256982800928,\n              ...\n               22.15582358870285, 22.155554094117615,  22.15528459953238,\n              22.155015104947143, 22.154745610361907,  22.15447611577667,\n              22.154206621191435,   22.1539371266062, 22.153667632020962,\n              22.153398137435726],\n             dtype='float64', name='y', length=1516))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (x: 5, y: 5)\nCoordinates:\n    band         int64 15\n  * x            (x) float64 113.8 113.8 113.8 113.8 113.8\n  * y            (y) float64 22.56 22.56 22.56 22.56 22.56\n    spatial_ref  int64 0\nData variables:\n    band_data    (y, x) float32 19.86 19.86 19.86 20.4 ... 17.04 17.04 17.04xarray.DatasetDimensions:x: 5y: 5Coordinates: (4)band()int6415array(15)x(x)float64113.8 113.8 113.8 113.8 113.8array([113.835187, 113.835456, 113.835726, 113.835995, 113.836265])y(y)float6422.56 22.56 22.56 22.56 22.56array([22.561682, 22.561413, 22.561143, 22.560874, 22.560604])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data(y, x)float3219.86 19.86 19.86 ... 17.04 17.04array([[19.857178, 19.857178, 19.857178, 20.401917, 19.857178],\n       [19.857544, 19.857544, 19.857544, 20.402283, 20.402283],\n       [19.85791 , 19.85791 , 20.40268 , 20.40268 , 19.85791 ],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246],\n       [17.039246, 17.039246, 17.039246, 17.039246, 17.039246]],\n      dtype=float32)Indexes: (2)xPandasIndexPandasIndex(Float64Index([113.83518654008887, 113.83545603467411, 113.83572552925935,\n              113.83599502384457, 113.83626451842981],\n             dtype='float64', name='x'))yPandasIndexPandasIndex(Float64Index([ 22.56168243406805, 22.561412939482814, 22.561143444897578,\n               22.56087395031234, 22.560604455727105],\n             dtype='float64', name='y'))Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      ()\nCoordinates:\n    band         int64 15\n    spatial_ref  int64 0\nData variables:\n    band_data    float32 20.17xarray.DatasetDimensions:Coordinates: (2)band()int6415array(15)spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :113.78465630535715 0.00026949458523585647 0.0 22.573674943111044 0.0 -0.00026949458523585647array(0)Data variables: (1)band_data()float3220.17array(20.173859, dtype=float32)Indexes: (0)Attributes: (0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\nmean_ndvi_2011\nmax_temp_2016\nmean_ndvi_2016\nmean_temp_2011\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n0.211102\n24.699992\n0.234139\n20.704102\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n0.090806\n26.748404\n0.097568\n23.277648\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n0.121019\n26.426119\n0.136822\n22.402509\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n0.262977\n24.956479\n0.282872\n21.255087\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n0.251814\n22.677352\n0.271825\n19.671759\n\n\n5\n6\n13\n中西區\n中西区\nCENTRAL & WESTERN\n1.460458e+07\n26733.700864\nMULTIPOLYGON (((114.14562 22.29045, 114.14990 ...\n0.194695\n23.794897\n0.199246\n18.948752\n\n\n6\n7\n14\n灣仔區\n湾仔区\nWAN CHAI\n1.161490e+07\n19548.075298\nMULTIPOLYGON (((114.20012 22.27387, 114.20047 ...\n0.191913\n24.292477\n0.201838\n19.608638\n\n\n7\n8\n15\n東區\n东区\nEASTERN\n2.184211e+07\n36188.456666\nPOLYGON ((114.24738 22.25339, 114.24733 22.253...\n0.213661\n23.827175\n0.236692\n19.821950\n\n\n8\n9\n17\n屯門區\n屯门区\nTUEN MUN\n9.921091e+07\n99074.932441\nMULTIPOLYGON (((113.93745 22.42638, 113.93765 ...\n0.188711\n25.061902\n0.221932\n20.773037\n\n\n9\n10\n18\n元朗區\n元朗区\nYUEN LONG\n1.648768e+08\n91328.856191\nMULTIPOLYGON (((113.93832 22.42696, 113.93843 ...\n0.196683\n23.764657\n0.213754\n20.540728"
  },
  {
    "objectID": "analysis/5-HK-Temp-NDVI.html#introduction",
    "href": "analysis/5-HK-Temp-NDVI.html#introduction",
    "title": "Urban Heat (Temperature), NDVI, and Cluster Analysis",
    "section": "",
    "text": "Temperature and NDVI are two major factors when considering Urban Heat Index Selection of Landsat 7 Data for Consistency with Census Intervals The Urban Heat Index (UHI) analysis in Hong Kong heavily relies on two primary factors: temperature and the Normalized Difference Vegetation Index (NDVI). To align the satellite data with census intervals, we’ve opted for data from Landsat 7 ETM+. The choice of Landsat 7, despite the availability of Landsat 8 and 9, is dictated by the need for consistency with the census data from the Hong Kong government and ESRI Hong Kong, which are available every five years. The most recent census data was from 2021, necessitating the use of data from 2011 and 2016 as well. Given that Landsat 8 started operating in 2013, it wouldn’t cover the entire period corresponding to our census data, leading to the decision to utilize Landsat 7’s data for a comprehensive analysis."
  },
  {
    "objectID": "analysis/3-Building.html#building-distribution",
    "href": "analysis/3-Building.html#building-distribution",
    "title": "Data Exploratory: Building",
    "section": "Building Distribution",
    "text": "Building Distribution\n\n\nCode\n# please try again if run with error for first time\ndistrict_url = (\n    'https://services3.arcgis.com/6j1KwZfY2fZrfNMR/arcgis/rest/services/Hong_Kong_18_Districts/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson'\n)\nhk_limit = gpd.read_file(district_url)\nhk_limit.head()\n\n\n\n\n\n\n\n\n\nOBJECTID\nID\nCNAME\nCNAME_S\nENAME\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n1\n黃大仙區\n黄大仙区\nWONG TAI SIN\n1.092784e+07\n17995.640782\nPOLYGON ((114.17942 22.34905, 114.17946 22.349...\n\n\n1\n2\n6\n九龍城區\n九龙城区\nKOWLOON CITY\n1.184286e+07\n31834.409404\nMULTIPOLYGON (((114.17700 22.34904, 114.17702 ...\n\n\n2\n3\n7\n觀塘區\n观塘区\nKWUN TONG\n1.322124e+07\n25496.700164\nPOLYGON ((114.24371 22.28620, 114.24370 22.286...\n\n\n3\n4\n8\n西貢區\n西贡区\nSAI KUNG\n1.602944e+08\n365545.476363\nMULTIPOLYGON (((114.22112 22.35318, 114.22114 ...\n\n\n4\n5\n11\n北區\n北区\nNORTH\n1.619184e+08\n192815.532996\nMULTIPOLYGON (((114.33576 22.51003, 114.33576 ...\n\n\n\n\n\n\n\n\n\nCode\nbuilding_raw = gpd.read_file(\n    \"/Users/hangzhao/Documents/MUSA_550/Final Project/Data/Building.geojson\")\nbuilding_raw.head()\n\n\n\n\n\n\n\n\n\nOBJECTID\nLASTUPDATEDATE\nBUILDINGID\nTYPEOFBUILDINGBLOCK\nBASELEVEL\nROOFLEVEL\nBASELEVELDATASOURCE\nROOFLEVELDATASOURCE\nBUILDINGSTATUS\nCERTAINTY\nShape__Area\nShape__Length\ngeometry\n\n\n\n\n0\n1\n2014-07-01 00:00:00+00:00\n1108522404\nT\n16.9\n21.3\n5\n4\nE\n1\n71.640625\n34.756858\nPOLYGON Z ((113.96350 22.40813 0.00000, 113.96...\n\n\n1\n2\n2014-07-01 00:00:00+00:00\n1108523034\nT\n15.5\n18.0\n5\n5\nE\n1\n74.509766\n40.051622\nPOLYGON Z ((113.97897 22.40319 0.00000, 113.97...\n\n\n2\n3\n2014-07-01 00:00:00+00:00\n1108523019\nT\n7.4\n12.3\n5\n4\nE\n1\n73.322266\n36.024633\nPOLYGON Z ((113.97356 22.40331 0.00000, 113.97...\n\n\n3\n4\n2014-07-01 00:00:00+00:00\n1105710522\nOS\nNaN\nNaN\n4\n4\nE\n1\n75.222656\n34.720149\nPOLYGON Z ((113.98813 22.47048 0.00000, 113.98...\n\n\n4\n5\n2014-07-01 00:00:00+00:00\n1105710546\nOS\nNaN\nNaN\n4\n4\nE\n1\n46.123047\n28.230848\nPOLYGON Z ((114.06630 22.47048 0.00000, 114.06...\n\n\n\n\n\n\n\n\n\nCode\n# Define some a default plot width & height\nplot_width  = 800\nplot_height = int(plot_width*7.0/12)\n\n\n\n\nCode\nbuilding_raw['x'] = building_raw.geometry.centroid.x\nbuilding_raw['y'] = building_raw.geometry.centroid.y\n\n\n\n\nCode\ndistricts_map = hk_limit.hvplot.polygons(\n    geo=True,\n    crs=4326,\n    line_color=\"white\",\n    fill_alpha=0,\n    frame_width=plot_width,\n    frame_height=plot_height,\n)\n\n\n\n\nCode\npoints = building_raw.hvplot.points(\n    x=\"x\",\n    y=\"y\",\n    datashade=True, # NEW: tell hvplot to use datashader!\n    aggregator=ds.count(), # NEW: how to aggregate\n    cmap=fire, \n    geo=True,\n    crs=4326, \n    frame_width=plot_width,\n    frame_height=plot_height,\n    tiles=\"CartoDark\"\n)\n\n#gv.tile_sources.CartoDark\npoints"
  },
  {
    "objectID": "analysis/3-Building.html#building-density-mapping",
    "href": "analysis/3-Building.html#building-density-mapping",
    "title": "Data Exploratory: Building",
    "section": "Building Density Mapping",
    "text": "Building Density Mapping\n\n\nCode\njoin = gpd.sjoin(building_raw, hk_limit, how='right')#, predicate=\"within\")\n\n\n\n\nCode\nbuilding_area_by_district = join.groupby('ENAME')['Shape__Area_left'].sum().reset_index()\n\n\n\n\nCode\ngdf = pd.merge(\n    hk_limit[[\"geometry\", \"ENAME\"]], building_area_by_district, on=\"ENAME\")\n\n\n\n\nCode\ngdf['building_density'] = gdf['Shape__Area_left'] / hk_limit['Shape__Area']\n\n\n\n\nCode\ngdf.to_file(\"building_file.geojson\", driver='GeoJSON')\n\n\n\n\nCode\ngdf.hvplot(\n    c=\"building_density\", \n    frame_width=600,\n    frame_height=600,\n    cmap=\"bone_r\",\n    geo=True, \n    tiles=\"CartoDark\"\n)"
  }
]